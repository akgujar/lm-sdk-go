// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GraphLine graph line
//
// swagger:model GraphLine
type GraphLine struct {

	// The graph line color name
	ColorName string `json:"colorName,omitempty"`

	// The graph line data point id
	// Read Only: true
	DataPointID int32 `json:"dataPointId,omitempty"`

	// The graph line data point name
	DataPointName string `json:"dataPointName,omitempty"`

	// Whether the graph line's data point is a virtual data point
	IsVirtualDataPoint bool `json:"isVirtualDataPoint,omitempty"`

	// The graph line legend
	Legend string `json:"legend,omitempty"`

	// The graph line type.
	// The values can be 1|2|3|4
	// where,
	//       1=line, 2=area, 3=stack, 4=column
	Type int32 `json:"type,omitempty"`
}

// Validate validates this graph line
func (m *GraphLine) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this graph line based on the context it is used
func (m *GraphLine) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataPointID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphLine) contextValidateDataPointID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dataPointId", "body", int32(m.DataPointID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphLine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphLine) UnmarshalBinary(b []byte) error {
	var res GraphLine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
