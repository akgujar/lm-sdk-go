// Code generated by go-swagger; DO NOT EDIT.

package alert_rules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"reflect"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new alert rules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
		userAgent: nil,
	}
}

/*
Client for alert rules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
	userAgent *string
}

/*
AddAlertRule adds alert rule
*/
func (a *Client) AddAlertRule(params *AddAlertRuleParams) (*AddAlertRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAlertRuleParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAlertRule",
		Method:             "POST",
		PathPattern:        "/setting/alert/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAlertRuleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddAlertRuleOK), nil

}

/*
DeleteAlertRuleByID deletes alert rule
*/
func (a *Client) DeleteAlertRuleByID(params *DeleteAlertRuleByIDParams) (*DeleteAlertRuleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAlertRuleByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAlertRuleById",
		Method:             "DELETE",
		PathPattern:        "/setting/alert/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAlertRuleByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAlertRuleByIDOK), nil

}

/*
GetAlertRuleByID gets alert rule by id
*/
func (a *Client) GetAlertRuleByID(params *GetAlertRuleByIDParams) (*GetAlertRuleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRuleByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertRuleById",
		Method:             "GET",
		PathPattern:        "/setting/alert/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertRuleByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertRuleByIDOK), nil

}

/*
GetAlertRuleList gets alert rule list
*/
func (a *Client) GetAlertRuleList(params *GetAlertRuleListParams) (*GetAlertRuleListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRuleListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertRuleList",
		Method:             "GET",
		PathPattern:        "/setting/alert/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertRuleListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertRuleListOK), nil

}

/*
PatchAlertRuleByID updates alert rule
*/
func (a *Client) PatchAlertRuleByID(params *PatchAlertRuleByIDParams) (*PatchAlertRuleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAlertRuleByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAlertRuleById",
		Method:             "PATCH",
		PathPattern:        "/setting/alert/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAlertRuleByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAlertRuleByIDOK), nil

}

/*
UpdateAlertRuleByID updates alert rule
*/
func (a *Client) UpdateAlertRuleByID(params *UpdateAlertRuleByIDParams) (*UpdateAlertRuleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAlertRuleByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAlertRuleById",
		Method:             "PUT",
		PathPattern:        "/setting/alert/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAlertRuleByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAlertRuleByIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// SetUserAgent changes the userAgent on the client
func (a *Client) SetUserAgent(userAgent *string) {
	a.userAgent = userAgent
}
