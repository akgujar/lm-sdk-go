// Code generated by go-swagger; DO NOT EDIT.

package datasources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"reflect"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new datasources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
		userAgent: nil,
	}
}

/*
Client for datasources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
	userAgent *string
}

/*
AddDatasourceAuditVersion adds audit version
*/
func (a *Client) AddDatasourceAuditVersion(params *AddDatasourceAuditVersionParams) (*AddDatasourceAuditVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDatasourceAuditVersionParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDatasourceAuditVersion",
		Method:             "POST",
		PathPattern:        "/setting/datasources/{id}/audit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDatasourceAuditVersionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDatasourceAuditVersionOK), nil

}

/*
DeleteDatasourceByID deletes datasource
*/
func (a *Client) DeleteDatasourceByID(params *DeleteDatasourceByIDParams) (*DeleteDatasourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatasourceByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDatasourceById",
		Method:             "DELETE",
		PathPattern:        "/setting/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDatasourceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDatasourceByIDOK), nil

}

/*
GetAssociatedDeviceListByDataSourceID gets devices associated with a datasource
*/
func (a *Client) GetAssociatedDeviceListByDataSourceID(params *GetAssociatedDeviceListByDataSourceIDParams) (*GetAssociatedDeviceListByDataSourceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssociatedDeviceListByDataSourceIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAssociatedDeviceListByDataSourceId",
		Method:             "GET",
		PathPattern:        "/setting/datasources/{id}/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssociatedDeviceListByDataSourceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAssociatedDeviceListByDataSourceIDOK), nil

}

/*
GetDataSourceOverviewGraphList gets datasource overview graph list
*/
func (a *Client) GetDataSourceOverviewGraphList(params *GetDataSourceOverviewGraphListParams) (*GetDataSourceOverviewGraphListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataSourceOverviewGraphListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDataSourceOverviewGraphList",
		Method:             "GET",
		PathPattern:        "/setting/datasources/{dsId}/ographs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataSourceOverviewGraphListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDataSourceOverviewGraphListOK), nil

}

/*
GetDatasourceByID gets datasource by id
*/
func (a *Client) GetDatasourceByID(params *GetDatasourceByIDParams) (*GetDatasourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatasourceByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDatasourceById",
		Method:             "GET",
		PathPattern:        "/setting/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatasourceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDatasourceByIDOK), nil

}

/*
GetDatasourceList gets datasource list
*/
func (a *Client) GetDatasourceList(params *GetDatasourceListParams) (*GetDatasourceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatasourceListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDatasourceList",
		Method:             "GET",
		PathPattern:        "/setting/datasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatasourceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDatasourceListOK), nil

}

/*
GetUpdateReasonListByDataSourceID gets update history for a datasource
*/
func (a *Client) GetUpdateReasonListByDataSourceID(params *GetUpdateReasonListByDataSourceIDParams) (*GetUpdateReasonListByDataSourceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpdateReasonListByDataSourceIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUpdateReasonListByDataSourceId",
		Method:             "GET",
		PathPattern:        "/setting/datasources/{id}/updatereasons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUpdateReasonListByDataSourceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUpdateReasonListByDataSourceIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// SetUserAgent changes the userAgent on the client
func (a *Client) SetUserAgent(userAgent *string) {
	a.userAgent = userAgent
}
