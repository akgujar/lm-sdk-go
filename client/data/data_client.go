// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"reflect"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new data API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
		userAgent: nil,
	}
}

/*
Client for data API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
	userAgent *string
}

/*
GetDeviceDatasourceInstanceData gets device instance data
*/
func (a *Client) GetDeviceDatasourceInstanceData(params *GetDeviceDatasourceInstanceDataParams) (*GetDeviceDatasourceInstanceDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceDataParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceData",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceDataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceDataOK), nil

}

/*
GetDeviceDatasourceInstanceGraphData gets device instance graph data
*/
func (a *Client) GetDeviceDatasourceInstanceGraphData(params *GetDeviceDatasourceInstanceGraphDataParams) (*GetDeviceDatasourceInstanceGraphDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceGraphDataParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceGraphData",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/graphs/{graphId}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceGraphDataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceGraphDataOK), nil

}

/*
GetDeviceDatasourceInstanceGroupOverviewGraphData gets device instance group overview graph data
*/
func (a *Client) GetDeviceDatasourceInstanceGroupOverviewGraphData(params *GetDeviceDatasourceInstanceGroupOverviewGraphDataParams) (*GetDeviceDatasourceInstanceGroupOverviewGraphDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceGroupOverviewGraphDataParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceGroupOverviewGraphData",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups/{dsigId}/graphs/{ographId}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceGroupOverviewGraphDataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceGroupOverviewGraphDataOK), nil

}

/*
GetDeviceInstanceGraphDataOnlyByInstanceID gets device instance data
*/
func (a *Client) GetDeviceInstanceGraphDataOnlyByInstanceID(params *GetDeviceInstanceGraphDataOnlyByInstanceIDParams) (*GetDeviceInstanceGraphDataOnlyByInstanceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceInstanceGraphDataOnlyByInstanceIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceInstanceGraphDataOnlyByInstanceId",
		Method:             "GET",
		PathPattern:        "/device/devicedatasourceinstances/{instanceId}/graphs/{graphId}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceInstanceGraphDataOnlyByInstanceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceInstanceGraphDataOnlyByInstanceIDOK), nil

}

/*
GetWebsiteCheckpointDataByID gets data for a website checkpoint
*/
func (a *Client) GetWebsiteCheckpointDataByID(params *GetWebsiteCheckpointDataByIDParams) (*GetWebsiteCheckpointDataByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteCheckpointDataByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteCheckpointDataById",
		Method:             "GET",
		PathPattern:        "/website/websites/{srvId}/checkpoints/{checkId}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteCheckpointDataByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteCheckpointDataByIDOK), nil

}

/*
GetWebsiteGraphData gets website graph data
*/
func (a *Client) GetWebsiteGraphData(params *GetWebsiteGraphDataParams) (*GetWebsiteGraphDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteGraphDataParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteGraphData",
		Method:             "GET",
		PathPattern:        "/website/websites/{websiteId}/checkpoints/{checkpointId}/graphs/{graphName}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteGraphDataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteGraphDataOK), nil

}

/*
GetWidgetDataByID gets widget data based upon widget type the response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes
*/
func (a *Client) GetWidgetDataByID(params *GetWidgetDataByIDParams) (*GetWidgetDataByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetDataByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWidgetDataById",
		Method:             "GET",
		PathPattern:        "/dashboard/widgets/{id}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetDataByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetDataByIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// SetUserAgent changes the userAgent on the client
func (a *Client) SetUserAgent(userAgent *string) {
	a.userAgent = userAgent
}
