// Code generated by go-swagger; DO NOT EDIT.

package widgets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"reflect"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new widgets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
		userAgent: nil,
	}
}

/*
Client for widgets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
	userAgent *string
}

/*
AddWidget adds widget based upon widget type the request and response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes
*/
func (a *Client) AddWidget(params *AddWidgetParams) (*AddWidgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddWidgetParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addWidget",
		Method:             "POST",
		PathPattern:        "/dashboard/widgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddWidgetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddWidgetOK), nil

}

/*
DeleteWidgetByID deletes widget
*/
func (a *Client) DeleteWidgetByID(params *DeleteWidgetByIDParams) (*DeleteWidgetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWidgetByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWidgetById",
		Method:             "DELETE",
		PathPattern:        "/dashboard/widgets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWidgetByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWidgetByIDOK), nil

}

/*
GetWidgetByID gets widget by id based upon widget type the response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes
*/
func (a *Client) GetWidgetByID(params *GetWidgetByIDParams) (*GetWidgetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWidgetById",
		Method:             "GET",
		PathPattern:        "/dashboard/widgets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetByIDOK), nil

}

/*
GetWidgetList gets widget list based upon widget type the response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes
*/
func (a *Client) GetWidgetList(params *GetWidgetListParams) (*GetWidgetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWidgetList",
		Method:             "GET",
		PathPattern:        "/dashboard/widgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetListOK), nil

}

/*
PatchWidgetByID updates widget based upon widget type the request and response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes
*/
func (a *Client) PatchWidgetByID(params *PatchWidgetByIDParams) (*PatchWidgetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchWidgetByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWidgetById",
		Method:             "PATCH",
		PathPattern:        "/dashboard/widgets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWidgetByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWidgetByIDOK), nil

}

/*
UpdateWidgetByID updates widget based upon widget type the request and response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes
*/
func (a *Client) UpdateWidgetByID(params *UpdateWidgetByIDParams) (*UpdateWidgetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWidgetByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWidgetById",
		Method:             "PUT",
		PathPattern:        "/dashboard/widgets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWidgetByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateWidgetByIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// SetUserAgent changes the userAgent on the client
func (a *Client) SetUserAgent(userAgent *string) {
	a.userAgent = userAgent
}
