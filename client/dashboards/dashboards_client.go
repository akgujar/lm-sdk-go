// Code generated by go-swagger; DO NOT EDIT.

package dashboards

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"reflect"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new dashboards API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
		userAgent: nil,
	}
}

/*
Client for dashboards API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
	userAgent *string
}

/*
AddDashboard adds dashboard
*/
func (a *Client) AddDashboard(params *AddDashboardParams) (*AddDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDashboardParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDashboard",
		Method:             "POST",
		PathPattern:        "/dashboard/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDashboardReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDashboardOK), nil

}

/*
DeleteDashboardByID deletes dashboard
*/
func (a *Client) DeleteDashboardByID(params *DeleteDashboardByIDParams) (*DeleteDashboardByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDashboardByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDashboardById",
		Method:             "DELETE",
		PathPattern:        "/dashboard/dashboards/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDashboardByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDashboardByIDOK), nil

}

/*
GetDashboardByID gets dashboard
*/
func (a *Client) GetDashboardByID(params *GetDashboardByIDParams) (*GetDashboardByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDashboardById",
		Method:             "GET",
		PathPattern:        "/dashboard/dashboards/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDashboardByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDashboardByIDOK), nil

}

/*
GetDashboardList gets dashboard list
*/
func (a *Client) GetDashboardList(params *GetDashboardListParams) (*GetDashboardListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDashboardList",
		Method:             "GET",
		PathPattern:        "/dashboard/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDashboardListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDashboardListOK), nil

}

/*
GetWidgetListByDashboardID gets widget list by dashboard Id
*/
func (a *Client) GetWidgetListByDashboardID(params *GetWidgetListByDashboardIDParams) (*GetWidgetListByDashboardIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetListByDashboardIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWidgetListByDashboardId",
		Method:             "GET",
		PathPattern:        "/dashboard/dashboards/{id}/widgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetListByDashboardIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetListByDashboardIDOK), nil

}

/*
PatchDashboardByID updates dashboard

The template field works only for the POST API
*/
func (a *Client) PatchDashboardByID(params *PatchDashboardByIDParams) (*PatchDashboardByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDashboardByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDashboardById",
		Method:             "PATCH",
		PathPattern:        "/dashboard/dashboards/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDashboardByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDashboardByIDOK), nil

}

/*
UpdateDashboardByID updates dashboard

The template field works only for the POST API
*/
func (a *Client) UpdateDashboardByID(params *UpdateDashboardByIDParams) (*UpdateDashboardByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDashboardByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDashboardById",
		Method:             "PUT",
		PathPattern:        "/dashboard/dashboards/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDashboardByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDashboardByIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// SetUserAgent changes the userAgent on the client
func (a *Client) SetUserAgent(userAgent *string) {
	a.userAgent = userAgent
}
