// Code generated by go-swagger; DO NOT EDIT.

package s_d_ts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"reflect"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new s d ts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
		userAgent: nil,
	}
}

/*
Client for s d ts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
	userAgent *string
}

/*
AddSDT adds SDT response may contain extra fields depending upon the type of SDT being added
*/
func (a *Client) AddSDT(params *AddSDTParams) (*AddSDTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSDTParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addSDT",
		Method:             "POST",
		PathPattern:        "/sdt/sdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddSDTReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddSDTOK), nil

}

/*
DeleteSDTByID deletes SDT
*/
func (a *Client) DeleteSDTByID(params *DeleteSDTByIDParams) (*DeleteSDTByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSDTByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSDTById",
		Method:             "DELETE",
		PathPattern:        "/sdt/sdts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSDTByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSDTByIDOK), nil

}

/*
GetSDTByID gets SDT by id response may contain extra fields depending upon the type of SDT of given id
*/
func (a *Client) GetSDTByID(params *GetSDTByIDParams) (*GetSDTByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTById",
		Method:             "GET",
		PathPattern:        "/sdt/sdts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTByIDOK), nil

}

/*
GetSDTList gets SDT list
*/
func (a *Client) GetSDTList(params *GetSDTListParams) (*GetSDTListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTList",
		Method:             "GET",
		PathPattern:        "/sdt/sdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTListOK), nil

}

/*
PatchSDTByID updates SDT response may contain extra fields depending upon the type of SDT being updated
*/
func (a *Client) PatchSDTByID(params *PatchSDTByIDParams) (*PatchSDTByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSDTByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSDTById",
		Method:             "PATCH",
		PathPattern:        "/sdt/sdts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSDTByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSDTByIDOK), nil

}

/*
UpdateSDTByID updates SDT response may contain extra fields depending upon the type of SDT being updated
*/
func (a *Client) UpdateSDTByID(params *UpdateSDTByIDParams) (*UpdateSDTByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSDTByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSDTById",
		Method:             "PUT",
		PathPattern:        "/sdt/sdts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSDTByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSDTByIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// SetUserAgent changes the userAgent on the client
func (a *Client) SetUserAgent(userAgent *string) {
	a.userAgent = userAgent
}
