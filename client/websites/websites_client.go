// Code generated by go-swagger; DO NOT EDIT.

package websites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"reflect"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new websites API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
		userAgent: nil,
	}
}

/*
Client for websites API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
	userAgent *string
}

/*
AddWebsite adds website
*/
func (a *Client) AddWebsite(params *AddWebsiteParams) (*AddWebsiteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddWebsiteParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addWebsite",
		Method:             "POST",
		PathPattern:        "/website/websites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddWebsiteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddWebsiteOK), nil

}

/*
DeleteWebsiteByID deletes website
*/
func (a *Client) DeleteWebsiteByID(params *DeleteWebsiteByIDParams) (*DeleteWebsiteByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWebsiteByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWebsiteById",
		Method:             "DELETE",
		PathPattern:        "/website/websites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebsiteByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWebsiteByIDOK), nil

}

/*
GetSDTHistoryByWebsiteID gets SDT history for the website response may contain extra fields depending upon the type of SDT
*/
func (a *Client) GetSDTHistoryByWebsiteID(params *GetSDTHistoryByWebsiteIDParams) (*GetSDTHistoryByWebsiteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTHistoryByWebsiteIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTHistoryByWebsiteId",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/historysdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTHistoryByWebsiteIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTHistoryByWebsiteIDOK), nil

}

/*
GetSiteMonitorCheckPointList gets website checkpoint list
*/
func (a *Client) GetSiteMonitorCheckPointList(params *GetSiteMonitorCheckPointListParams) (*GetSiteMonitorCheckPointListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteMonitorCheckPointListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSiteMonitorCheckPointList",
		Method:             "GET",
		PathPattern:        "/website/smcheckpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSiteMonitorCheckPointListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSiteMonitorCheckPointListOK), nil

}

/*
GetWebsiteAlertListByWebsiteID gets alerts for a website
*/
func (a *Client) GetWebsiteAlertListByWebsiteID(params *GetWebsiteAlertListByWebsiteIDParams) (*GetWebsiteAlertListByWebsiteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteAlertListByWebsiteIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteAlertListByWebsiteId",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteAlertListByWebsiteIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteAlertListByWebsiteIDOK), nil

}

/*
GetWebsiteByID gets website by id
*/
func (a *Client) GetWebsiteByID(params *GetWebsiteByIDParams) (*GetWebsiteByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteById",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteByIDOK), nil

}

/*
GetWebsiteDataByGraphName gets website data by graph name
*/
func (a *Client) GetWebsiteDataByGraphName(params *GetWebsiteDataByGraphNameParams) (*GetWebsiteDataByGraphNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteDataByGraphNameParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteDataByGraphName",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/graphs/{graphName}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteDataByGraphNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteDataByGraphNameOK), nil

}

/*
GetWebsiteList gets website list
*/
func (a *Client) GetWebsiteList(params *GetWebsiteListParams) (*GetWebsiteListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteList",
		Method:             "GET",
		PathPattern:        "/website/websites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteListOK), nil

}

/*
GetWebsitePropertyListByWebsiteID gets a list of properties for a website
*/
func (a *Client) GetWebsitePropertyListByWebsiteID(params *GetWebsitePropertyListByWebsiteIDParams) (*GetWebsitePropertyListByWebsiteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsitePropertyListByWebsiteIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsitePropertyListByWebsiteId",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsitePropertyListByWebsiteIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsitePropertyListByWebsiteIDOK), nil

}

/*
GetWebsiteSDTListByWebsiteID gets a list of s d ts for a website
*/
func (a *Client) GetWebsiteSDTListByWebsiteID(params *GetWebsiteSDTListByWebsiteIDParams) (*GetWebsiteSDTListByWebsiteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteSDTListByWebsiteIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteSDTListByWebsiteId",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/sdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteSDTListByWebsiteIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteSDTListByWebsiteIDOK), nil

}

/*
PatchWebsiteByID updates website
*/
func (a *Client) PatchWebsiteByID(params *PatchWebsiteByIDParams) (*PatchWebsiteByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchWebsiteByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWebsiteById",
		Method:             "PATCH",
		PathPattern:        "/website/websites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWebsiteByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWebsiteByIDOK), nil

}

/*
UpdateWebsiteByID updates website
*/
func (a *Client) UpdateWebsiteByID(params *UpdateWebsiteByIDParams) (*UpdateWebsiteByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWebsiteByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWebsiteById",
		Method:             "PUT",
		PathPattern:        "/website/websites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWebsiteByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateWebsiteByIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// SetUserAgent changes the userAgent on the client
func (a *Client) SetUserAgent(userAgent *string) {
	a.userAgent = userAgent
}
