// Code generated by go-swagger; DO NOT EDIT.

package datasource_instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/logicmonitor/lm-sdk-go/models"
)

// PatchDeviceDatasourceInstanceByIDReader is a Reader for the PatchDeviceDatasourceInstanceByID structure.
type PatchDeviceDatasourceInstanceByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchDeviceDatasourceInstanceByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchDeviceDatasourceInstanceByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 429:
		result := NewPatchDeviceDatasourceInstanceByIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchDeviceDatasourceInstanceByIDDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchDeviceDatasourceInstanceByIDOK creates a PatchDeviceDatasourceInstanceByIDOK with default headers values
func NewPatchDeviceDatasourceInstanceByIDOK() *PatchDeviceDatasourceInstanceByIDOK {
	return &PatchDeviceDatasourceInstanceByIDOK{}
}

/*
PatchDeviceDatasourceInstanceByIDOK describes a response with status code 200, with default header values.

successful operation
*/
type PatchDeviceDatasourceInstanceByIDOK struct {
	Payload *models.DeviceDataSourceInstance
}

// IsSuccess returns true when this patch device datasource instance by Id o k response has a 2xx status code
func (o *PatchDeviceDatasourceInstanceByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch device datasource instance by Id o k response has a 3xx status code
func (o *PatchDeviceDatasourceInstanceByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch device datasource instance by Id o k response has a 4xx status code
func (o *PatchDeviceDatasourceInstanceByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch device datasource instance by Id o k response has a 5xx status code
func (o *PatchDeviceDatasourceInstanceByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch device datasource instance by Id o k response a status code equal to that given
func (o *PatchDeviceDatasourceInstanceByIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchDeviceDatasourceInstanceByIDOK) Error() string {
	return fmt.Sprintf("[PATCH /device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}][%d] patchDeviceDatasourceInstanceByIdOK  %+v", 200, o.Payload)
}

func (o *PatchDeviceDatasourceInstanceByIDOK) String() string {
	return fmt.Sprintf("[PATCH /device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}][%d] patchDeviceDatasourceInstanceByIdOK  %+v", 200, o.Payload)
}

func (o *PatchDeviceDatasourceInstanceByIDOK) GetPayload() *models.DeviceDataSourceInstance {
	return o.Payload
}

func (o *PatchDeviceDatasourceInstanceByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeviceDataSourceInstance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDeviceDatasourceInstanceByIDTooManyRequests creates a PatchDeviceDatasourceInstanceByIDTooManyRequests with default headers values
func NewPatchDeviceDatasourceInstanceByIDTooManyRequests() *PatchDeviceDatasourceInstanceByIDTooManyRequests {
	return &PatchDeviceDatasourceInstanceByIDTooManyRequests{}
}

/*
PatchDeviceDatasourceInstanceByIDTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type PatchDeviceDatasourceInstanceByIDTooManyRequests struct {

	/* Request limit per X-Rate-Limit-Window
	 */
	XRateLimitLimit int64

	/* The number of requests left for the time window
	 */
	XRateLimitRemaining int64

	/* The rolling time window length with the unit of second
	 */
	XRateLimitWindow int64
}

// IsSuccess returns true when this patch device datasource instance by Id too many requests response has a 2xx status code
func (o *PatchDeviceDatasourceInstanceByIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch device datasource instance by Id too many requests response has a 3xx status code
func (o *PatchDeviceDatasourceInstanceByIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch device datasource instance by Id too many requests response has a 4xx status code
func (o *PatchDeviceDatasourceInstanceByIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch device datasource instance by Id too many requests response has a 5xx status code
func (o *PatchDeviceDatasourceInstanceByIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this patch device datasource instance by Id too many requests response a status code equal to that given
func (o *PatchDeviceDatasourceInstanceByIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PatchDeviceDatasourceInstanceByIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}][%d] patchDeviceDatasourceInstanceByIdTooManyRequests ", 429)
}

func (o *PatchDeviceDatasourceInstanceByIDTooManyRequests) String() string {
	return fmt.Sprintf("[PATCH /device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}][%d] patchDeviceDatasourceInstanceByIdTooManyRequests ", 429)
}

func (o *PatchDeviceDatasourceInstanceByIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-rate-limit-limit
	hdrXRateLimitLimit := response.GetHeader("x-rate-limit-limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("x-rate-limit-limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header x-rate-limit-remaining
	hdrXRateLimitRemaining := response.GetHeader("x-rate-limit-remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("x-rate-limit-remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header x-rate-limit-window
	hdrXRateLimitWindow := response.GetHeader("x-rate-limit-window")

	if hdrXRateLimitWindow != "" {
		valxRateLimitWindow, err := swag.ConvertInt64(hdrXRateLimitWindow)
		if err != nil {
			return errors.InvalidType("x-rate-limit-window", "header", "int64", hdrXRateLimitWindow)
		}
		o.XRateLimitWindow = valxRateLimitWindow
	}

	return nil
}

// NewPatchDeviceDatasourceInstanceByIDDefault creates a PatchDeviceDatasourceInstanceByIDDefault with default headers values
func NewPatchDeviceDatasourceInstanceByIDDefault(code int) *PatchDeviceDatasourceInstanceByIDDefault {
	return &PatchDeviceDatasourceInstanceByIDDefault{
		_statusCode: code,
	}
}

/*
PatchDeviceDatasourceInstanceByIDDefault describes a response with status code -1, with default header values.

Error
*/
type PatchDeviceDatasourceInstanceByIDDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the patch device datasource instance by Id default response
func (o *PatchDeviceDatasourceInstanceByIDDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this patch device datasource instance by Id default response has a 2xx status code
func (o *PatchDeviceDatasourceInstanceByIDDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this patch device datasource instance by Id default response has a 3xx status code
func (o *PatchDeviceDatasourceInstanceByIDDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this patch device datasource instance by Id default response has a 4xx status code
func (o *PatchDeviceDatasourceInstanceByIDDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this patch device datasource instance by Id default response has a 5xx status code
func (o *PatchDeviceDatasourceInstanceByIDDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this patch device datasource instance by Id default response a status code equal to that given
func (o *PatchDeviceDatasourceInstanceByIDDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *PatchDeviceDatasourceInstanceByIDDefault) Error() string {
	return fmt.Sprintf("[PATCH /device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}][%d] patchDeviceDatasourceInstanceById default  %+v", o._statusCode, o.Payload)
}

func (o *PatchDeviceDatasourceInstanceByIDDefault) String() string {
	return fmt.Sprintf("[PATCH /device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}][%d] patchDeviceDatasourceInstanceById default  %+v", o._statusCode, o.Payload)
}

func (o *PatchDeviceDatasourceInstanceByIDDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchDeviceDatasourceInstanceByIDDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
