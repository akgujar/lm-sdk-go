// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"reflect"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new devices API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
		userAgent: nil,
	}
}

/*
Client for devices API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
	userAgent *string
}

/*
AddDevice adds a new device
*/
func (a *Client) AddDevice(params *AddDeviceParams) (*AddDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDeviceParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDevice",
		Method:             "POST",
		PathPattern:        "/device/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDeviceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDeviceOK), nil

}

/*
AddDeviceProperty adds device property
*/
func (a *Client) AddDeviceProperty(params *AddDevicePropertyParams) (*AddDevicePropertyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDevicePropertyParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDeviceProperty",
		Method:             "POST",
		PathPattern:        "/device/devices/{deviceId}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDevicePropertyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDevicePropertyOK), nil

}

/*
DeleteDeviceByID deletes a device
*/
func (a *Client) DeleteDeviceByID(params *DeleteDeviceByIDParams) (*DeleteDeviceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceById",
		Method:             "DELETE",
		PathPattern:        "/device/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeviceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDeviceByIDOK), nil

}

/*
DeleteDevicePropertyByName deletes device property
*/
func (a *Client) DeleteDevicePropertyByName(params *DeleteDevicePropertyByNameParams) (*DeleteDevicePropertyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicePropertyByNameParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDevicePropertyByName",
		Method:             "DELETE",
		PathPattern:        "/device/devices/{deviceId}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDevicePropertyByNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDevicePropertyByNameOK), nil

}

/*
GetAlertListByDeviceID gets alerts
*/
func (a *Client) GetAlertListByDeviceID(params *GetAlertListByDeviceIDParams) (*GetAlertListByDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertListByDeviceIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertListByDeviceId",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertListByDeviceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertListByDeviceIDOK), nil

}

/*
GetAllSDTListByDeviceID gets s d ts for a device
*/
func (a *Client) GetAllSDTListByDeviceID(params *GetAllSDTListByDeviceIDParams) (*GetAllSDTListByDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSDTListByDeviceIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllSDTListByDeviceId",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/sdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllSDTListByDeviceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllSDTListByDeviceIDOK), nil

}

/*
GetDeviceByID gets device by id
*/
func (a *Client) GetDeviceByID(params *GetDeviceByIDParams) (*GetDeviceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceById",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceByIDOK), nil

}

/*
GetDeviceDatasourceByID gets device datasource
*/
func (a *Client) GetDeviceDatasourceByID(params *GetDeviceDatasourceByIDParams) (*GetDeviceDatasourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceById",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceByIDOK), nil

}

/*
GetDeviceDatasourceDataByID gets device datasource data
*/
func (a *Client) GetDeviceDatasourceDataByID(params *GetDeviceDatasourceDataByIDParams) (*GetDeviceDatasourceDataByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceDataByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceDataById",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{id}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceDataByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceDataByIDOK), nil

}

/*
GetDeviceDatasourceList gets device datasource list
*/
func (a *Client) GetDeviceDatasourceList(params *GetDeviceDatasourceListParams) (*GetDeviceDatasourceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceList",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceListOK), nil

}

/*
GetDeviceInstanceList gets device instance list
*/
func (a *Client) GetDeviceInstanceList(params *GetDeviceInstanceListParams) (*GetDeviceInstanceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceInstanceListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceInstanceList",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceInstanceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceInstanceListOK), nil

}

/*
GetDeviceList gets device list
*/
func (a *Client) GetDeviceList(params *GetDeviceListParams) (*GetDeviceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceList",
		Method:             "GET",
		PathPattern:        "/device/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceListOK), nil

}

/*
GetDevicePropertyByName gets device property by name
*/
func (a *Client) GetDevicePropertyByName(params *GetDevicePropertyByNameParams) (*GetDevicePropertyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicePropertyByNameParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicePropertyByName",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDevicePropertyByNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDevicePropertyByNameOK), nil

}

/*
GetDevicePropertyList gets device properties
*/
func (a *Client) GetDevicePropertyList(params *GetDevicePropertyListParams) (*GetDevicePropertyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicePropertyListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicePropertyList",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDevicePropertyListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDevicePropertyListOK), nil

}

/*
GetNetflowFlowList gets netflow flows
*/
func (a *Client) GetNetflowFlowList(params *GetNetflowFlowListParams) (*GetNetflowFlowListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetflowFlowListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetflowFlowList",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/flows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetflowFlowListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetflowFlowListOK), nil

}

/*
GetSDTHistoryByDeviceDataSourceID gets SDT history for the device data source
*/
func (a *Client) GetSDTHistoryByDeviceDataSourceID(params *GetSDTHistoryByDeviceDataSourceIDParams) (*GetSDTHistoryByDeviceDataSourceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTHistoryByDeviceDataSourceIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTHistoryByDeviceDataSourceId",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{id}/historysdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTHistoryByDeviceDataSourceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTHistoryByDeviceDataSourceIDOK), nil

}

/*
GetSDTHistoryByDeviceID gets SDT history for the device
*/
func (a *Client) GetSDTHistoryByDeviceID(params *GetSDTHistoryByDeviceIDParams) (*GetSDTHistoryByDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTHistoryByDeviceIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTHistoryByDeviceId",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/historysdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTHistoryByDeviceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTHistoryByDeviceIDOK), nil

}

/*
GetTopTalkersGraph gets top talkers graph
*/
func (a *Client) GetTopTalkersGraph(params *GetTopTalkersGraphParams) (*GetTopTalkersGraphOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTopTalkersGraphParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTopTalkersGraph",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/topTalkersGraph",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTopTalkersGraphReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTopTalkersGraphOK), nil

}

/*
GetUnmonitoredDeviceList gets unmonitored device list
*/
func (a *Client) GetUnmonitoredDeviceList(params *GetUnmonitoredDeviceListParams) (*GetUnmonitoredDeviceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUnmonitoredDeviceListParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUnmonitoredDeviceList",
		Method:             "GET",
		PathPattern:        "/device/unmonitoreddevices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUnmonitoredDeviceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUnmonitoredDeviceListOK), nil

}

/*
PatchDevice updates a device
*/
func (a *Client) PatchDevice(params *PatchDeviceParams) (*PatchDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeviceParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDevice",
		Method:             "PATCH",
		PathPattern:        "/device/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeviceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDeviceOK), nil

}

/*
PatchDevicePropertyByName updates device property
*/
func (a *Client) PatchDevicePropertyByName(params *PatchDevicePropertyByNameParams) (*PatchDevicePropertyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDevicePropertyByNameParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDevicePropertyByName",
		Method:             "PATCH",
		PathPattern:        "/device/devices/{deviceId}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDevicePropertyByNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDevicePropertyByNameOK), nil

}

/*
ScheduleAutoDiscoveryByDeviceID schedules active discovery for a device
*/
func (a *Client) ScheduleAutoDiscoveryByDeviceID(params *ScheduleAutoDiscoveryByDeviceIDParams) (*ScheduleAutoDiscoveryByDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleAutoDiscoveryByDeviceIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scheduleAutoDiscoveryByDeviceId",
		Method:             "POST",
		PathPattern:        "/device/devices/{id}/scheduleAutoDiscovery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduleAutoDiscoveryByDeviceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ScheduleAutoDiscoveryByDeviceIDOK), nil

}

/*
UpdateDevice updates a device
*/
func (a *Client) UpdateDevice(params *UpdateDeviceParams) (*UpdateDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDevice",
		Method:             "PUT",
		PathPattern:        "/device/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDeviceOK), nil

}

/*
UpdateDevicePropertyByName updates device property
*/
func (a *Client) UpdateDevicePropertyByName(params *UpdateDevicePropertyByNameParams) (*UpdateDevicePropertyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDevicePropertyByNameParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDevicePropertyByName",
		Method:             "PUT",
		PathPattern:        "/device/devices/{deviceId}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDevicePropertyByNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDevicePropertyByNameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// SetUserAgent changes the userAgent on the client
func (a *Client) SetUserAgent(userAgent *string) {
	a.userAgent = userAgent
}
