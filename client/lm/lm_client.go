// Code generated by go-swagger; DO NOT EDIT.

package lm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new lm API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
	}
}

/*
Client for lm API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
}

/*
AckAlertByID acks alert by id
*/
func (a *Client) AckAlertByID(params *AckAlertByIDParams) (*AckAlertByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAckAlertByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ackAlertById",
		Method:             "POST",
		PathPattern:        "/alert/alerts/{id}/ack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AckAlertByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AckAlertByIDOK), nil

}

/*
AckCollectorDownAlertByID acks collector down alert
*/
func (a *Client) AckCollectorDownAlertByID(params *AckCollectorDownAlertByIDParams) (*AckCollectorDownAlertByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAckCollectorDownAlertByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ackCollectorDownAlertById",
		Method:             "POST",
		PathPattern:        "/setting/collector/collectors/{id}/ackdown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AckCollectorDownAlertByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AckCollectorDownAlertByIDOK), nil

}

/*
AddAccessGroup creates a access group
*/
func (a *Client) AddAccessGroup(params *AddAccessGroupParams) (*AddAccessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAccessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAccessGroup",
		Method:             "POST",
		PathPattern:        "/setting/accessgroup/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAccessGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddAccessGroupOK), nil

}

/*
AddAdmin adds user
*/
func (a *Client) AddAdmin(params *AddAdminParams) (*AddAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAdminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAdmin",
		Method:             "POST",
		PathPattern:        "/setting/admins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAdminReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddAdminOK), nil

}

/*
AddAlertNoteByID adds alert note
*/
func (a *Client) AddAlertNoteByID(params *AddAlertNoteByIDParams) (*AddAlertNoteByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAlertNoteByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAlertNoteById",
		Method:             "POST",
		PathPattern:        "/alert/alerts/{id}/note",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAlertNoteByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddAlertNoteByIDOK), nil

}

/*
AddAlertRule adds alert rule
*/
func (a *Client) AddAlertRule(params *AddAlertRuleParams) (*AddAlertRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAlertRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAlertRule",
		Method:             "POST",
		PathPattern:        "/setting/alert/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAlertRuleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddAlertRuleOK), nil

}

/*
AddAPITokenByAdminID adds api tokens for a user
*/
func (a *Client) AddAPITokenByAdminID(params *AddAPITokenByAdminIDParams) (*AddAPITokenByAdminIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAPITokenByAdminIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addApiTokenByAdminId",
		Method:             "POST",
		PathPattern:        "/setting/admins/{adminId}/apitokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAPITokenByAdminIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddAPITokenByAdminIDOK), nil

}

/*
AddAppliesToFunction adds applies to function
*/
func (a *Client) AddAppliesToFunction(params *AddAppliesToFunctionParams) (*AddAppliesToFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAppliesToFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAppliesToFunction",
		Method:             "POST",
		PathPattern:        "/setting/functions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAppliesToFunctionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddAppliesToFunctionOK), nil

}

/*
AddCollector adds collector
*/
func (a *Client) AddCollector(params *AddCollectorParams) (*AddCollectorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCollectorParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addCollector",
		Method:             "POST",
		PathPattern:        "/setting/collector/collectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddCollectorReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddCollectorOK), nil

}

/*
AddCollectorGroup adds collector group
*/
func (a *Client) AddCollectorGroup(params *AddCollectorGroupParams) (*AddCollectorGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCollectorGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addCollectorGroup",
		Method:             "POST",
		PathPattern:        "/setting/collector/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddCollectorGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddCollectorGroupOK), nil

}

/*
AddDashboard adds dashboard
*/
func (a *Client) AddDashboard(params *AddDashboardParams) (*AddDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDashboard",
		Method:             "POST",
		PathPattern:        "/dashboard/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDashboardReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDashboardOK), nil

}

/*
AddDashboardGroup adds dashboard group
*/
func (a *Client) AddDashboardGroup(params *AddDashboardGroupParams) (*AddDashboardGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDashboardGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDashboardGroup",
		Method:             "POST",
		PathPattern:        "/dashboard/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDashboardGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDashboardGroupOK), nil

}

/*
AddDashboardGroupAsynchronously adds dashboard group asynchronously
*/
func (a *Client) AddDashboardGroupAsynchronously(params *AddDashboardGroupAsynchronouslyParams) (*AddDashboardGroupAsynchronouslyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDashboardGroupAsynchronouslyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDashboardGroupAsynchronously",
		Method:             "POST",
		PathPattern:        "/dashboard/groups/{id}/asyncclone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDashboardGroupAsynchronouslyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDashboardGroupAsynchronouslyOK), nil

}

/*
AddDatasourceByID adds datasource
*/
func (a *Client) AddDatasourceByID(params *AddDatasourceByIDParams) (*AddDatasourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDatasourceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDatasourceById",
		Method:             "POST",
		PathPattern:        "/setting/datasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDatasourceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDatasourceByIDOK), nil

}

/*
AddDevice adds a new device
*/
func (a *Client) AddDevice(params *AddDeviceParams) (*AddDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDevice",
		Method:             "POST",
		PathPattern:        "/device/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDeviceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDeviceOK), nil

}

/*
AddDeviceDatasourceInstance adds device instance
*/
func (a *Client) AddDeviceDatasourceInstance(params *AddDeviceDatasourceInstanceParams) (*AddDeviceDatasourceInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDeviceDatasourceInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDeviceDatasourceInstance",
		Method:             "POST",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDeviceDatasourceInstanceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDeviceDatasourceInstanceOK), nil

}

/*
AddDeviceDatasourceInstanceGroup adds device datasource instance group
*/
func (a *Client) AddDeviceDatasourceInstanceGroup(params *AddDeviceDatasourceInstanceGroupParams) (*AddDeviceDatasourceInstanceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDeviceDatasourceInstanceGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDeviceDatasourceInstanceGroup",
		Method:             "POST",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDeviceDatasourceInstanceGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDeviceDatasourceInstanceGroupOK), nil

}

/*
AddDeviceGroup adds device group
*/
func (a *Client) AddDeviceGroup(params *AddDeviceGroupParams) (*AddDeviceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDeviceGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDeviceGroup",
		Method:             "POST",
		PathPattern:        "/device/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDeviceGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDeviceGroupOK), nil

}

/*
AddDeviceGroupProperty adds device group property
*/
func (a *Client) AddDeviceGroupProperty(params *AddDeviceGroupPropertyParams) (*AddDeviceGroupPropertyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDeviceGroupPropertyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDeviceGroupProperty",
		Method:             "POST",
		PathPattern:        "/device/groups/{gid}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDeviceGroupPropertyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDeviceGroupPropertyOK), nil

}

/*
AddDeviceProperty adds device property
*/
func (a *Client) AddDeviceProperty(params *AddDevicePropertyParams) (*AddDevicePropertyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDevicePropertyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDeviceProperty",
		Method:             "POST",
		PathPattern:        "/device/devices/{deviceId}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDevicePropertyReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDevicePropertyOK), nil

}

/*
AddEscalationChain adds escalation chain
*/
func (a *Client) AddEscalationChain(params *AddEscalationChainParams) (*AddEscalationChainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddEscalationChainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addEscalationChain",
		Method:             "POST",
		PathPattern:        "/setting/alert/chains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddEscalationChainReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddEscalationChainOK), nil

}

/*
AddNetscan adds a new netscan
*/
func (a *Client) AddNetscan(params *AddNetscanParams) (*AddNetscanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddNetscanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addNetscan",
		Method:             "POST",
		PathPattern:        "/setting/netscans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddNetscanReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddNetscanOK), nil

}

/*
AddOpsNote adds opsnote
*/
func (a *Client) AddOpsNote(params *AddOpsNoteParams) (*AddOpsNoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOpsNoteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addOpsNote",
		Method:             "POST",
		PathPattern:        "/setting/opsnotes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddOpsNoteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddOpsNoteOK), nil

}

/*
AddRecipientGroup adds recipient group
*/
func (a *Client) AddRecipientGroup(params *AddRecipientGroupParams) (*AddRecipientGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRecipientGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addRecipientGroup",
		Method:             "POST",
		PathPattern:        "/setting/recipientgroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddRecipientGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddRecipientGroupOK), nil

}

/*
AddReport adds report
*/
func (a *Client) AddReport(params *AddReportParams) (*AddReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addReport",
		Method:             "POST",
		PathPattern:        "/report/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddReportReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddReportOK), nil

}

/*
AddReportGroup adds report group
*/
func (a *Client) AddReportGroup(params *AddReportGroupParams) (*AddReportGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddReportGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addReportGroup",
		Method:             "POST",
		PathPattern:        "/report/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddReportGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddReportGroupOK), nil

}

/*
AddRole adds role
*/
func (a *Client) AddRole(params *AddRoleParams) (*AddRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addRole",
		Method:             "POST",
		PathPattern:        "/setting/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddRoleReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddRoleOK), nil

}

/*
AddSDT adds SDT response may contain extra fields depending upon the type of SDT being added
*/
func (a *Client) AddSDT(params *AddSDTParams) (*AddSDTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSDTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addSDT",
		Method:             "POST",
		PathPattern:        "/sdt/sdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddSDTReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddSDTOK), nil

}

/*
AddWebsite adds website
*/
func (a *Client) AddWebsite(params *AddWebsiteParams) (*AddWebsiteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddWebsiteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addWebsite",
		Method:             "POST",
		PathPattern:        "/website/websites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddWebsiteReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddWebsiteOK), nil

}

/*
AddWebsiteGroup adds website group
*/
func (a *Client) AddWebsiteGroup(params *AddWebsiteGroupParams) (*AddWebsiteGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddWebsiteGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addWebsiteGroup",
		Method:             "POST",
		PathPattern:        "/website/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddWebsiteGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddWebsiteGroupOK), nil

}

/*
AddWidget adds widget based upon widget type the request and response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes
*/
func (a *Client) AddWidget(params *AddWidgetParams) (*AddWidgetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddWidgetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addWidget",
		Method:             "POST",
		PathPattern:        "/dashboard/widgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddWidgetReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddWidgetOK), nil

}

/*
CollectDeviceConfigSourceConfig collects a config for a device
*/
func (a *Client) CollectDeviceConfigSourceConfig(params *CollectDeviceConfigSourceConfigParams) (*CollectDeviceConfigSourceConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectDeviceConfigSourceConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "collectDeviceConfigSourceConfig",
		Method:             "POST",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/config/configCollection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CollectDeviceConfigSourceConfigReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CollectDeviceConfigSourceConfigOK), nil

}

/*
DeleteAccessGroup deletes access group
*/
func (a *Client) DeleteAccessGroup(params *DeleteAccessGroupParams) (*DeleteAccessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAccessGroup",
		Method:             "DELETE",
		PathPattern:        "/setting/accessgroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAccessGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAccessGroupOK), nil

}

/*
DeleteAdminByID deletes user
*/
func (a *Client) DeleteAdminByID(params *DeleteAdminByIDParams) (*DeleteAdminByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAdminByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAdminById",
		Method:             "DELETE",
		PathPattern:        "/setting/admins/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAdminByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAdminByIDOK), nil

}

/*
DeleteAlertRuleByID deletes alert rule
*/
func (a *Client) DeleteAlertRuleByID(params *DeleteAlertRuleByIDParams) (*DeleteAlertRuleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAlertRuleByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAlertRuleById",
		Method:             "DELETE",
		PathPattern:        "/setting/alert/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAlertRuleByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAlertRuleByIDOK), nil

}

/*
DeleteCollectorByID deletes collector
*/
func (a *Client) DeleteCollectorByID(params *DeleteCollectorByIDParams) (*DeleteCollectorByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCollectorByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCollectorById",
		Method:             "DELETE",
		PathPattern:        "/setting/collector/collectors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCollectorByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCollectorByIDOK), nil

}

/*
DeleteCollectorGroupByID deletes collector group
*/
func (a *Client) DeleteCollectorGroupByID(params *DeleteCollectorGroupByIDParams) (*DeleteCollectorGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCollectorGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCollectorGroupById",
		Method:             "DELETE",
		PathPattern:        "/setting/collector/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCollectorGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCollectorGroupByIDOK), nil

}

/*
DeleteDashboardByID deletes dashboard
*/
func (a *Client) DeleteDashboardByID(params *DeleteDashboardByIDParams) (*DeleteDashboardByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDashboardByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDashboardById",
		Method:             "DELETE",
		PathPattern:        "/dashboard/dashboards/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDashboardByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDashboardByIDOK), nil

}

/*
DeleteDashboardGroupByID deletes dashboard group
*/
func (a *Client) DeleteDashboardGroupByID(params *DeleteDashboardGroupByIDParams) (*DeleteDashboardGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDashboardGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDashboardGroupById",
		Method:             "DELETE",
		PathPattern:        "/dashboard/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDashboardGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDashboardGroupByIDOK), nil

}

/*
DeleteDatasourceByID deletes datasource
*/
func (a *Client) DeleteDatasourceByID(params *DeleteDatasourceByIDParams) (*DeleteDatasourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatasourceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDatasourceById",
		Method:             "DELETE",
		PathPattern:        "/setting/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDatasourceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDatasourceByIDOK), nil

}

/*
DeleteDeviceByID deletes a device
*/
func (a *Client) DeleteDeviceByID(params *DeleteDeviceByIDParams) (*DeleteDeviceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceById",
		Method:             "DELETE",
		PathPattern:        "/device/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeviceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDeviceByIDOK), nil

}

/*
DeleteDeviceDatasourceInstanceByID deletes a device instance
*/
func (a *Client) DeleteDeviceDatasourceInstanceByID(params *DeleteDeviceDatasourceInstanceByIDParams) (*DeleteDeviceDatasourceInstanceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceDatasourceInstanceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceDatasourceInstanceById",
		Method:             "DELETE",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeviceDatasourceInstanceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDeviceDatasourceInstanceByIDOK), nil

}

/*
DeleteDeviceGroupByID deletes device group
*/
func (a *Client) DeleteDeviceGroupByID(params *DeleteDeviceGroupByIDParams) (*DeleteDeviceGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceGroupById",
		Method:             "DELETE",
		PathPattern:        "/device/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeviceGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDeviceGroupByIDOK), nil

}

/*
DeleteDeviceGroupPropertyByName deletes device group property
*/
func (a *Client) DeleteDeviceGroupPropertyByName(params *DeleteDeviceGroupPropertyByNameParams) (*DeleteDeviceGroupPropertyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceGroupPropertyByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceGroupPropertyByName",
		Method:             "DELETE",
		PathPattern:        "/device/groups/{gid}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeviceGroupPropertyByNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDeviceGroupPropertyByNameOK), nil

}

/*
DeleteDevicePropertyByName deletes device property
*/
func (a *Client) DeleteDevicePropertyByName(params *DeleteDevicePropertyByNameParams) (*DeleteDevicePropertyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDevicePropertyByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDevicePropertyByName",
		Method:             "DELETE",
		PathPattern:        "/device/devices/{deviceId}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDevicePropertyByNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDevicePropertyByNameOK), nil

}

/*
DeleteReportByID deletes report
*/
func (a *Client) DeleteReportByID(params *DeleteReportByIDParams) (*DeleteReportByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReportByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteReportById",
		Method:             "DELETE",
		PathPattern:        "/report/reports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteReportByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteReportByIDOK), nil

}

/*
DeleteReportGroupByID deletes report group
*/
func (a *Client) DeleteReportGroupByID(params *DeleteReportGroupByIDParams) (*DeleteReportGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReportGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteReportGroupById",
		Method:             "DELETE",
		PathPattern:        "/report/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteReportGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteReportGroupByIDOK), nil

}

/*
DeleteRoleByID deletes role
*/
func (a *Client) DeleteRoleByID(params *DeleteRoleByIDParams) (*DeleteRoleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoleByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoleById",
		Method:             "DELETE",
		PathPattern:        "/setting/roles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoleByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoleByIDOK), nil

}

/*
DeleteSDTByID deletes SDT
*/
func (a *Client) DeleteSDTByID(params *DeleteSDTByIDParams) (*DeleteSDTByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSDTByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSDTById",
		Method:             "DELETE",
		PathPattern:        "/sdt/sdts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSDTByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSDTByIDOK), nil

}

/*
DeleteWebsiteByID deletes website
*/
func (a *Client) DeleteWebsiteByID(params *DeleteWebsiteByIDParams) (*DeleteWebsiteByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWebsiteByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWebsiteById",
		Method:             "DELETE",
		PathPattern:        "/website/websites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebsiteByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWebsiteByIDOK), nil

}

/*
DeleteWebsiteGroupByID deletes website group
*/
func (a *Client) DeleteWebsiteGroupByID(params *DeleteWebsiteGroupByIDParams) (*DeleteWebsiteGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWebsiteGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWebsiteGroupById",
		Method:             "DELETE",
		PathPattern:        "/website/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWebsiteGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWebsiteGroupByIDOK), nil

}

/*
DeleteWidgetByID deletes widget
*/
func (a *Client) DeleteWidgetByID(params *DeleteWidgetByIDParams) (*DeleteWidgetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWidgetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWidgetById",
		Method:             "DELETE",
		PathPattern:        "/dashboard/widgets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWidgetByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWidgetByIDOK), nil

}

/*
DiscoverSubscriptions views subscriptions
*/
func (a *Client) DiscoverSubscriptions(params *DiscoverSubscriptionsParams) (*DiscoverSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDiscoverSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "discoverSubscriptions",
		Method:             "POST",
		PathPattern:        "/azure/functions/discoverSubscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DiscoverSubscriptionsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DiscoverSubscriptionsOK), nil

}

/*
EscalatedAlertByID escalates alert by id
*/
func (a *Client) EscalatedAlertByID(params *EscalatedAlertByIDParams) (*EscalatedAlertByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEscalatedAlertByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "escalatedAlertById",
		Method:             "POST",
		PathPattern:        "/alert/alerts/{id}/escalate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EscalatedAlertByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EscalatedAlertByIDOK), nil

}

/*
ExecuteDebugCommand executes a collector debug command
*/
func (a *Client) ExecuteDebugCommand(params *ExecuteDebugCommandParams) (*ExecuteDebugCommandOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteDebugCommandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "executeDebugCommand",
		Method:             "POST",
		PathPattern:        "/debug",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteDebugCommandReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ExecuteDebugCommandOK), nil

}

/*
FetchDeviceInstancesData fetches device instances data
*/
func (a *Client) FetchDeviceInstancesData(params *FetchDeviceInstancesDataParams) (*FetchDeviceInstancesDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFetchDeviceInstancesDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "fetchDeviceInstancesData",
		Method:             "POST",
		PathPattern:        "/device/instances/datafetch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FetchDeviceInstancesDataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FetchDeviceInstancesDataOK), nil

}

/*
FetchReportUsingTaskID gets report for task Id
*/
func (a *Client) FetchReportUsingTaskID(params *FetchReportUsingTaskIDParams) (*FetchReportUsingTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFetchReportUsingTaskIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "fetchReportUsingTaskId",
		Method:             "GET",
		PathPattern:        "/report/reports/{id}/tasks/{taskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FetchReportUsingTaskIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FetchReportUsingTaskIDOK), nil

}

/*
FetchReportUsingTaskIDJSON gets report for task Id raw response
*/
func (a *Client) FetchReportUsingTaskIDJSON(params *FetchReportUsingTaskIDJSONParams) (*FetchReportUsingTaskIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFetchReportUsingTaskIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "fetchReportUsingTaskIdJson",
		Method:             "GET",
		PathPattern:        "/report/reports/{id}/tasks/{taskId}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FetchReportUsingTaskIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FetchReportUsingTaskIDJSONOK), nil

}

/*
GenerateReportByID runs a report
*/
func (a *Client) GenerateReportByID(params *GenerateReportByIDParams) (*GenerateReportByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateReportByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generateReportById",
		Method:             "POST",
		PathPattern:        "/report/reports/{id}/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateReportByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GenerateReportByIDOK), nil

}

/*
GetAccessGroupByID gets access group by id
*/
func (a *Client) GetAccessGroupByID(params *GetAccessGroupByIDParams) (*GetAccessGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccessGroupById",
		Method:             "GET",
		PathPattern:        "/setting/accessgroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccessGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccessGroupByIDOK), nil

}

/*
GetAccessGroupByIDJSON gets access group by id raw response
*/
func (a *Client) GetAccessGroupByIDJSON(params *GetAccessGroupByIDJSONParams) (*GetAccessGroupByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessGroupByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccessGroupByIdJson",
		Method:             "GET",
		PathPattern:        "/setting/accessgroup/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccessGroupByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccessGroupByIDJSONOK), nil

}

/*
GetAccessGroupList gets access group list
*/
func (a *Client) GetAccessGroupList(params *GetAccessGroupListParams) (*GetAccessGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccessGroupList",
		Method:             "GET",
		PathPattern:        "/setting/accessgroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccessGroupListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccessGroupListOK), nil

}

/*
GetAccessGroupListJSON gets access group list raw response
*/
func (a *Client) GetAccessGroupListJSON(params *GetAccessGroupListJSONParams) (*GetAccessGroupListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessGroupListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccessGroupListJson",
		Method:             "GET",
		PathPattern:        "/setting/accessgroup?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccessGroupListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccessGroupListJSONOK), nil

}

/*
GetAdminByID gets user
*/
func (a *Client) GetAdminByID(params *GetAdminByIDParams) (*GetAdminByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdminByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAdminById",
		Method:             "GET",
		PathPattern:        "/setting/admins/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdminByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAdminByIDOK), nil

}

/*
GetAdminByIDJSON gets user raw response
*/
func (a *Client) GetAdminByIDJSON(params *GetAdminByIDJSONParams) (*GetAdminByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdminByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAdminByIdJson",
		Method:             "GET",
		PathPattern:        "/setting/admins/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdminByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAdminByIDJSONOK), nil

}

/*
GetAdminList gets user list
*/
func (a *Client) GetAdminList(params *GetAdminListParams) (*GetAdminListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdminListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAdminList",
		Method:             "GET",
		PathPattern:        "/setting/admins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdminListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAdminListOK), nil

}

/*
GetAdminListJSON gets user list raw response
*/
func (a *Client) GetAdminListJSON(params *GetAdminListJSONParams) (*GetAdminListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdminListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAdminListJson",
		Method:             "GET",
		PathPattern:        "/setting/admins?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdminListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAdminListJSONOK), nil

}

/*
GetAlertByID gets alert
*/
func (a *Client) GetAlertByID(params *GetAlertByIDParams) (*GetAlertByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertById",
		Method:             "GET",
		PathPattern:        "/alert/alerts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertByIDOK), nil

}

/*
GetAlertByIDJSON gets alert raw response
*/
func (a *Client) GetAlertByIDJSON(params *GetAlertByIDJSONParams) (*GetAlertByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertByIdJson",
		Method:             "GET",
		PathPattern:        "/alert/alerts/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertByIDJSONOK), nil

}

/*
GetAlertList gets alert list
*/
func (a *Client) GetAlertList(params *GetAlertListParams) (*GetAlertListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertList",
		Method:             "GET",
		PathPattern:        "/alert/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertListOK), nil

}

/*
GetAlertListByDeviceGroupID gets device group alerts
*/
func (a *Client) GetAlertListByDeviceGroupID(params *GetAlertListByDeviceGroupIDParams) (*GetAlertListByDeviceGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertListByDeviceGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertListByDeviceGroupId",
		Method:             "GET",
		PathPattern:        "/device/groups/{id}/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertListByDeviceGroupIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertListByDeviceGroupIDOK), nil

}

/*
GetAlertListByDeviceGroupIDJSON gets device group alerts raw response
*/
func (a *Client) GetAlertListByDeviceGroupIDJSON(params *GetAlertListByDeviceGroupIDJSONParams) (*GetAlertListByDeviceGroupIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertListByDeviceGroupIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertListByDeviceGroupIdJson",
		Method:             "GET",
		PathPattern:        "/device/groups/{id}/alerts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertListByDeviceGroupIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertListByDeviceGroupIDJSONOK), nil

}

/*
GetAlertListByDeviceID gets alerts
*/
func (a *Client) GetAlertListByDeviceID(params *GetAlertListByDeviceIDParams) (*GetAlertListByDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertListByDeviceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertListByDeviceId",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertListByDeviceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertListByDeviceIDOK), nil

}

/*
GetAlertListByDeviceIDJSON gets alerts raw response
*/
func (a *Client) GetAlertListByDeviceIDJSON(params *GetAlertListByDeviceIDJSONParams) (*GetAlertListByDeviceIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertListByDeviceIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertListByDeviceIdJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/alerts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertListByDeviceIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertListByDeviceIDJSONOK), nil

}

/*
GetAlertListJSON gets alert list raw response
*/
func (a *Client) GetAlertListJSON(params *GetAlertListJSONParams) (*GetAlertListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertListJson",
		Method:             "GET",
		PathPattern:        "/alert/alerts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertListJSONOK), nil

}

/*
GetAlertRuleByID gets alert rule by id
*/
func (a *Client) GetAlertRuleByID(params *GetAlertRuleByIDParams) (*GetAlertRuleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRuleByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertRuleById",
		Method:             "GET",
		PathPattern:        "/setting/alert/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertRuleByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertRuleByIDOK), nil

}

/*
GetAlertRuleByIDJSON gets alert rule by id raw response
*/
func (a *Client) GetAlertRuleByIDJSON(params *GetAlertRuleByIDJSONParams) (*GetAlertRuleByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRuleByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertRuleByIdJson",
		Method:             "GET",
		PathPattern:        "/setting/alert/rules/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertRuleByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertRuleByIDJSONOK), nil

}

/*
GetAlertRuleList gets alert rule list
*/
func (a *Client) GetAlertRuleList(params *GetAlertRuleListParams) (*GetAlertRuleListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRuleListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertRuleList",
		Method:             "GET",
		PathPattern:        "/setting/alert/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertRuleListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertRuleListOK), nil

}

/*
GetAlertRuleListJSON gets alert rule list raw response
*/
func (a *Client) GetAlertRuleListJSON(params *GetAlertRuleListJSONParams) (*GetAlertRuleListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertRuleListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlertRuleListJson",
		Method:             "GET",
		PathPattern:        "/setting/alert/rules?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertRuleListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertRuleListJSONOK), nil

}

/*
GetAllSDTListByDeviceID gets s d ts for a device
*/
func (a *Client) GetAllSDTListByDeviceID(params *GetAllSDTListByDeviceIDParams) (*GetAllSDTListByDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSDTListByDeviceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllSDTListByDeviceId",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/sdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllSDTListByDeviceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllSDTListByDeviceIDOK), nil

}

/*
GetAllSDTListByDeviceIDJSON gets s d ts for a device raw response
*/
func (a *Client) GetAllSDTListByDeviceIDJSON(params *GetAllSDTListByDeviceIDJSONParams) (*GetAllSDTListByDeviceIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSDTListByDeviceIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllSDTListByDeviceIdJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/sdts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllSDTListByDeviceIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllSDTListByDeviceIDJSONOK), nil

}

/*
GetAllSDTListByWebsiteGroupID gets a list of s d ts for a website group response may contain extra fields depending upon the type of SDT
*/
func (a *Client) GetAllSDTListByWebsiteGroupID(params *GetAllSDTListByWebsiteGroupIDParams) (*GetAllSDTListByWebsiteGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSDTListByWebsiteGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllSDTListByWebsiteGroupId",
		Method:             "GET",
		PathPattern:        "/website/groups/{id}/sdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllSDTListByWebsiteGroupIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllSDTListByWebsiteGroupIDOK), nil

}

/*
GetAllSDTListByWebsiteGroupIDJSON gets a list of s d ts for a website group response may contain extra fields depending upon the type of SDT raw response
*/
func (a *Client) GetAllSDTListByWebsiteGroupIDJSON(params *GetAllSDTListByWebsiteGroupIDJSONParams) (*GetAllSDTListByWebsiteGroupIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSDTListByWebsiteGroupIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllSDTListByWebsiteGroupIdJson",
		Method:             "GET",
		PathPattern:        "/website/groups/{id}/sdts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllSDTListByWebsiteGroupIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllSDTListByWebsiteGroupIDJSONOK), nil

}

/*
GetAPITokenList gets a list of api tokens across users
*/
func (a *Client) GetAPITokenList(params *GetAPITokenListParams) (*GetAPITokenListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPITokenListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiTokenList",
		Method:             "GET",
		PathPattern:        "/setting/admins/apitokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPITokenListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPITokenListOK), nil

}

/*
GetAPITokenListByAdminID gets api tokens for a user
*/
func (a *Client) GetAPITokenListByAdminID(params *GetAPITokenListByAdminIDParams) (*GetAPITokenListByAdminIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPITokenListByAdminIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiTokenListByAdminId",
		Method:             "GET",
		PathPattern:        "/setting/admins/{adminId}/apitokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPITokenListByAdminIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPITokenListByAdminIDOK), nil

}

/*
GetAPITokenListByAdminIDJSON gets api tokens for a user raw response
*/
func (a *Client) GetAPITokenListByAdminIDJSON(params *GetAPITokenListByAdminIDJSONParams) (*GetAPITokenListByAdminIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPITokenListByAdminIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiTokenListByAdminIdJson",
		Method:             "GET",
		PathPattern:        "/setting/admins/{adminId}/apitokens?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPITokenListByAdminIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPITokenListByAdminIDJSONOK), nil

}

/*
GetAPITokenListJSON gets a list of api tokens across users raw response
*/
func (a *Client) GetAPITokenListJSON(params *GetAPITokenListJSONParams) (*GetAPITokenListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPITokenListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApiTokenListJson",
		Method:             "GET",
		PathPattern:        "/setting/admins/apitokens?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPITokenListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPITokenListJSONOK), nil

}

/*
GetAppliesToFunctionByID gets applies to function
*/
func (a *Client) GetAppliesToFunctionByID(params *GetAppliesToFunctionByIDParams) (*GetAppliesToFunctionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppliesToFunctionByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppliesToFunctionById",
		Method:             "GET",
		PathPattern:        "/setting/functions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppliesToFunctionByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppliesToFunctionByIDOK), nil

}

/*
GetAppliesToFunctionByIDJSON gets applies to function raw response
*/
func (a *Client) GetAppliesToFunctionByIDJSON(params *GetAppliesToFunctionByIDJSONParams) (*GetAppliesToFunctionByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppliesToFunctionByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppliesToFunctionByIdJson",
		Method:             "GET",
		PathPattern:        "/setting/functions/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppliesToFunctionByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppliesToFunctionByIDJSONOK), nil

}

/*
GetAppliesToFunctionList gets applies to function list
*/
func (a *Client) GetAppliesToFunctionList(params *GetAppliesToFunctionListParams) (*GetAppliesToFunctionListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppliesToFunctionListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppliesToFunctionList",
		Method:             "GET",
		PathPattern:        "/setting/functions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppliesToFunctionListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppliesToFunctionListOK), nil

}

/*
GetAppliesToFunctionListJSON gets applies to function list raw response
*/
func (a *Client) GetAppliesToFunctionListJSON(params *GetAppliesToFunctionListJSONParams) (*GetAppliesToFunctionListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAppliesToFunctionListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAppliesToFunctionListJson",
		Method:             "GET",
		PathPattern:        "/setting/functions?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAppliesToFunctionListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAppliesToFunctionListJSONOK), nil

}

/*
GetAssociatedDeviceListByDataSourceID gets devices associated with a datasource
*/
func (a *Client) GetAssociatedDeviceListByDataSourceID(params *GetAssociatedDeviceListByDataSourceIDParams) (*GetAssociatedDeviceListByDataSourceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssociatedDeviceListByDataSourceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAssociatedDeviceListByDataSourceId",
		Method:             "GET",
		PathPattern:        "/setting/datasources/{id}/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssociatedDeviceListByDataSourceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAssociatedDeviceListByDataSourceIDOK), nil

}

/*
GetAssociatedDeviceListByDataSourceIDJSON gets devices associated with a datasource raw response
*/
func (a *Client) GetAssociatedDeviceListByDataSourceIDJSON(params *GetAssociatedDeviceListByDataSourceIDJSONParams) (*GetAssociatedDeviceListByDataSourceIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAssociatedDeviceListByDataSourceIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAssociatedDeviceListByDataSourceIdJson",
		Method:             "GET",
		PathPattern:        "/setting/datasources/{id}/devices?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAssociatedDeviceListByDataSourceIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAssociatedDeviceListByDataSourceIDJSONOK), nil

}

/*
GetAuditLogList gets audit logs
*/
func (a *Client) GetAuditLogList(params *GetAuditLogListParams) (*GetAuditLogListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuditLogListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuditLogList",
		Method:             "GET",
		PathPattern:        "/setting/accesslogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuditLogListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuditLogListOK), nil

}

/*
GetAuditLogListJSON gets audit logs raw response
*/
func (a *Client) GetAuditLogListJSON(params *GetAuditLogListJSONParams) (*GetAuditLogListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuditLogListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuditLogListJson",
		Method:             "GET",
		PathPattern:        "/setting/accesslogs?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuditLogListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuditLogListJSONOK), nil

}

/*
GetAwsAccountID gets a w s account ID
*/
func (a *Client) GetAwsAccountID(params *GetAwsAccountIDParams) (*GetAwsAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsAccountId",
		Method:             "GET",
		PathPattern:        "/aws/accountId",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsAccountIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAwsAccountIDOK), nil

}

/*
GetAwsAccountIDJSON gets a w s account ID raw response
*/
func (a *Client) GetAwsAccountIDJSON(params *GetAwsAccountIDJSONParams) (*GetAwsAccountIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsAccountIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsAccountIdJson",
		Method:             "GET",
		PathPattern:        "/aws/accountId?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsAccountIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAwsAccountIDJSONOK), nil

}

/*
GetAwsExternalID gets a w s external ID
*/
func (a *Client) GetAwsExternalID(params *GetAwsExternalIDParams) (*GetAwsExternalIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsExternalIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsExternalId",
		Method:             "GET",
		PathPattern:        "/aws/externalId",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsExternalIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAwsExternalIDOK), nil

}

/*
GetAwsExternalIDJSON gets a w s external ID raw response
*/
func (a *Client) GetAwsExternalIDJSON(params *GetAwsExternalIDJSONParams) (*GetAwsExternalIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAwsExternalIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAwsExternalIdJson",
		Method:             "GET",
		PathPattern:        "/aws/externalId?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAwsExternalIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAwsExternalIDJSONOK), nil

}

/*
GetCollectorByID gets collector
*/
func (a *Client) GetCollectorByID(params *GetCollectorByIDParams) (*GetCollectorByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorById",
		Method:             "GET",
		PathPattern:        "/setting/collector/collectors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorByIDOK), nil

}

/*
GetCollectorByIDJSON gets collector raw response
*/
func (a *Client) GetCollectorByIDJSON(params *GetCollectorByIDJSONParams) (*GetCollectorByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorByIdJson",
		Method:             "GET",
		PathPattern:        "/setting/collector/collectors/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorByIDJSONOK), nil

}

/*
GetCollectorGroupByID gets collector group
*/
func (a *Client) GetCollectorGroupByID(params *GetCollectorGroupByIDParams) (*GetCollectorGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorGroupById",
		Method:             "GET",
		PathPattern:        "/setting/collector/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorGroupByIDOK), nil

}

/*
GetCollectorGroupByIDJSON gets collector group raw response
*/
func (a *Client) GetCollectorGroupByIDJSON(params *GetCollectorGroupByIDJSONParams) (*GetCollectorGroupByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorGroupByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorGroupByIdJson",
		Method:             "GET",
		PathPattern:        "/setting/collector/groups/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorGroupByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorGroupByIDJSONOK), nil

}

/*
GetCollectorGroupList gets collector group list
*/
func (a *Client) GetCollectorGroupList(params *GetCollectorGroupListParams) (*GetCollectorGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorGroupList",
		Method:             "GET",
		PathPattern:        "/setting/collector/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorGroupListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorGroupListOK), nil

}

/*
GetCollectorGroupListJSON gets collector group list raw response
*/
func (a *Client) GetCollectorGroupListJSON(params *GetCollectorGroupListJSONParams) (*GetCollectorGroupListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorGroupListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorGroupListJson",
		Method:             "GET",
		PathPattern:        "/setting/collector/groups?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorGroupListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorGroupListJSONOK), nil

}

/*
GetCollectorInstaller gets collector installer
*/
func (a *Client) GetCollectorInstaller(params *GetCollectorInstallerParams, writer io.Writer) (*GetCollectorInstallerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorInstallerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorInstaller",
		Method:             "GET",
		PathPattern:        "/setting/collector/collectors/{collectorId}/installers/{osAndArch}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorInstallerReader{formats: a.formats, writer: writer},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorInstallerOK), nil

}

/*
GetCollectorInstallerJSON gets collector installer raw response
*/
func (a *Client) GetCollectorInstallerJSON(params *GetCollectorInstallerJSONParams) (*GetCollectorInstallerJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorInstallerJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorInstallerJson",
		Method:             "GET",
		PathPattern:        "/setting/collector/collectors/{collectorId}/installers/{osAndArch}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorInstallerJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorInstallerJSONOK), nil

}

/*
GetCollectorList gets collector list
*/
func (a *Client) GetCollectorList(params *GetCollectorListParams) (*GetCollectorListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorList",
		Method:             "GET",
		PathPattern:        "/setting/collector/collectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorListOK), nil

}

/*
GetCollectorListJSON gets collector list raw response
*/
func (a *Client) GetCollectorListJSON(params *GetCollectorListJSONParams) (*GetCollectorListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorListJson",
		Method:             "GET",
		PathPattern:        "/setting/collector/collectors?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorListJSONOK), nil

}

/*
GetCollectorVersionList gets collector version list
*/
func (a *Client) GetCollectorVersionList(params *GetCollectorVersionListParams) (*GetCollectorVersionListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorVersionListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorVersionList",
		Method:             "GET",
		PathPattern:        "/setting/collector/collectors/versions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorVersionListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorVersionListOK), nil

}

/*
GetCollectorVersionListJSON gets collector version list raw response
*/
func (a *Client) GetCollectorVersionListJSON(params *GetCollectorVersionListJSONParams) (*GetCollectorVersionListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectorVersionListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCollectorVersionListJson",
		Method:             "GET",
		PathPattern:        "/setting/collector/collectors/versions?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectorVersionListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCollectorVersionListJSONOK), nil

}

/*
GetDashboardByID gets dashboard
*/
func (a *Client) GetDashboardByID(params *GetDashboardByIDParams) (*GetDashboardByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDashboardById",
		Method:             "GET",
		PathPattern:        "/dashboard/dashboards/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDashboardByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDashboardByIDOK), nil

}

/*
GetDashboardByIDJSON gets dashboard raw response
*/
func (a *Client) GetDashboardByIDJSON(params *GetDashboardByIDJSONParams) (*GetDashboardByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDashboardByIdJson",
		Method:             "GET",
		PathPattern:        "/dashboard/dashboards/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDashboardByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDashboardByIDJSONOK), nil

}

/*
GetDashboardGroupByID gets dashboard group
*/
func (a *Client) GetDashboardGroupByID(params *GetDashboardGroupByIDParams) (*GetDashboardGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDashboardGroupById",
		Method:             "GET",
		PathPattern:        "/dashboard/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDashboardGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDashboardGroupByIDOK), nil

}

/*
GetDashboardGroupByIDJSON gets dashboard group raw response
*/
func (a *Client) GetDashboardGroupByIDJSON(params *GetDashboardGroupByIDJSONParams) (*GetDashboardGroupByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardGroupByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDashboardGroupByIdJson",
		Method:             "GET",
		PathPattern:        "/dashboard/groups/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDashboardGroupByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDashboardGroupByIDJSONOK), nil

}

/*
GetDashboardGroupList gets dashboard group list
*/
func (a *Client) GetDashboardGroupList(params *GetDashboardGroupListParams) (*GetDashboardGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDashboardGroupList",
		Method:             "GET",
		PathPattern:        "/dashboard/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDashboardGroupListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDashboardGroupListOK), nil

}

/*
GetDashboardGroupListJSON gets dashboard group list raw response
*/
func (a *Client) GetDashboardGroupListJSON(params *GetDashboardGroupListJSONParams) (*GetDashboardGroupListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardGroupListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDashboardGroupListJson",
		Method:             "GET",
		PathPattern:        "/dashboard/groups?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDashboardGroupListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDashboardGroupListJSONOK), nil

}

/*
GetDashboardList gets dashboard list
*/
func (a *Client) GetDashboardList(params *GetDashboardListParams) (*GetDashboardListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDashboardList",
		Method:             "GET",
		PathPattern:        "/dashboard/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDashboardListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDashboardListOK), nil

}

/*
GetDashboardListJSON gets dashboard list raw response
*/
func (a *Client) GetDashboardListJSON(params *GetDashboardListJSONParams) (*GetDashboardListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDashboardListJson",
		Method:             "GET",
		PathPattern:        "/dashboard/dashboards?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDashboardListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDashboardListJSONOK), nil

}

/*
GetDataSourceOverviewGraphList gets datasource overview graph list
*/
func (a *Client) GetDataSourceOverviewGraphList(params *GetDataSourceOverviewGraphListParams) (*GetDataSourceOverviewGraphListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataSourceOverviewGraphListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDataSourceOverviewGraphList",
		Method:             "GET",
		PathPattern:        "/setting/datasources/{dsId}/ographs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataSourceOverviewGraphListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDataSourceOverviewGraphListOK), nil

}

/*
GetDataSourceOverviewGraphListJSON gets datasource overview graph list raw response
*/
func (a *Client) GetDataSourceOverviewGraphListJSON(params *GetDataSourceOverviewGraphListJSONParams) (*GetDataSourceOverviewGraphListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataSourceOverviewGraphListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDataSourceOverviewGraphListJson",
		Method:             "GET",
		PathPattern:        "/setting/datasources/{dsId}/ographs?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDataSourceOverviewGraphListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDataSourceOverviewGraphListJSONOK), nil

}

/*
GetDatasourceByID gets datasource by id
*/
func (a *Client) GetDatasourceByID(params *GetDatasourceByIDParams) (*GetDatasourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatasourceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDatasourceById",
		Method:             "GET",
		PathPattern:        "/setting/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatasourceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDatasourceByIDOK), nil

}

/*
GetDatasourceByIDJSON gets datasource by id raw response
*/
func (a *Client) GetDatasourceByIDJSON(params *GetDatasourceByIDJSONParams) (*GetDatasourceByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatasourceByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDatasourceByIdJson",
		Method:             "GET",
		PathPattern:        "/setting/datasources/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatasourceByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDatasourceByIDJSONOK), nil

}

/*
GetDatasourceList gets datasource list
*/
func (a *Client) GetDatasourceList(params *GetDatasourceListParams) (*GetDatasourceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatasourceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDatasourceList",
		Method:             "GET",
		PathPattern:        "/setting/datasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatasourceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDatasourceListOK), nil

}

/*
GetDatasourceListJSON gets datasource list raw response
*/
func (a *Client) GetDatasourceListJSON(params *GetDatasourceListJSONParams) (*GetDatasourceListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatasourceListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDatasourceListJson",
		Method:             "GET",
		PathPattern:        "/setting/datasources?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatasourceListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDatasourceListJSONOK), nil

}

/*
GetDebugCommandResult gets the result of a collector debug command using session Id
*/
func (a *Client) GetDebugCommandResult(params *GetDebugCommandResultParams) (*GetDebugCommandResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugCommandResultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDebugCommandResult",
		Method:             "GET",
		PathPattern:        "/debug/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDebugCommandResultReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDebugCommandResultOK), nil

}

/*
GetDebugCommandResultJSON gets the result of a collector debug command using session Id raw response
*/
func (a *Client) GetDebugCommandResultJSON(params *GetDebugCommandResultJSONParams) (*GetDebugCommandResultJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDebugCommandResultJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDebugCommandResultJson",
		Method:             "GET",
		PathPattern:        "/debug/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDebugCommandResultJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDebugCommandResultJSONOK), nil

}

/*
GetDeltaDevices gets delta devices using delta Id
*/
func (a *Client) GetDeltaDevices(params *GetDeltaDevicesParams) (*GetDeltaDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeltaDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeltaDevices",
		Method:             "GET",
		PathPattern:        "/device/devices/delta/{deltaId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeltaDevicesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeltaDevicesOK), nil

}

/*
GetDeltaDevicesJSON gets delta devices using delta Id raw response
*/
func (a *Client) GetDeltaDevicesJSON(params *GetDeltaDevicesJSONParams) (*GetDeltaDevicesJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeltaDevicesJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeltaDevicesJson",
		Method:             "GET",
		PathPattern:        "/device/devices/delta/{deltaId}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeltaDevicesJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeltaDevicesJSONOK), nil

}

/*
GetDeltaIDWithDevices gets filter matched devices with new delta Id
*/
func (a *Client) GetDeltaIDWithDevices(params *GetDeltaIDWithDevicesParams) (*GetDeltaIDWithDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeltaIDWithDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeltaIdWithDevices",
		Method:             "GET",
		PathPattern:        "/device/devices/delta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeltaIDWithDevicesReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeltaIDWithDevicesOK), nil

}

/*
GetDeltaIDWithDevicesJSON gets filter matched devices with new delta Id raw response
*/
func (a *Client) GetDeltaIDWithDevicesJSON(params *GetDeltaIDWithDevicesJSONParams) (*GetDeltaIDWithDevicesJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeltaIDWithDevicesJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeltaIdWithDevicesJson",
		Method:             "GET",
		PathPattern:        "/device/devices/delta?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeltaIDWithDevicesJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeltaIDWithDevicesJSONOK), nil

}

/*
GetDeviceByID gets device by id
*/
func (a *Client) GetDeviceByID(params *GetDeviceByIDParams) (*GetDeviceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceById",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceByIDOK), nil

}

/*
GetDeviceByIDJSON gets device by id raw response
*/
func (a *Client) GetDeviceByIDJSON(params *GetDeviceByIDJSONParams) (*GetDeviceByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceByIdJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceByIDJSONOK), nil

}

/*
GetDeviceConfigSourceConfigList gets detailed config information for the instance
*/
func (a *Client) GetDeviceConfigSourceConfigList(params *GetDeviceConfigSourceConfigListParams) (*GetDeviceConfigSourceConfigListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceConfigSourceConfigListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceConfigSourceConfigList",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceConfigSourceConfigListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceConfigSourceConfigListOK), nil

}

/*
GetDeviceConfigSourceConfigListJSON gets detailed config information for the instance raw response
*/
func (a *Client) GetDeviceConfigSourceConfigListJSON(params *GetDeviceConfigSourceConfigListJSONParams) (*GetDeviceConfigSourceConfigListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceConfigSourceConfigListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceConfigSourceConfigListJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/config?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceConfigSourceConfigListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceConfigSourceConfigListJSONOK), nil

}

/*
GetDeviceDatasourceByID gets device datasource
*/
func (a *Client) GetDeviceDatasourceByID(params *GetDeviceDatasourceByIDParams) (*GetDeviceDatasourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceById",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceByIDOK), nil

}

/*
GetDeviceDatasourceByIDJSON gets device datasource raw response
*/
func (a *Client) GetDeviceDatasourceByIDJSON(params *GetDeviceDatasourceByIDJSONParams) (*GetDeviceDatasourceByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceByIdJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceByIDJSONOK), nil

}

/*
GetDeviceDatasourceDataByID gets device datasource data
*/
func (a *Client) GetDeviceDatasourceDataByID(params *GetDeviceDatasourceDataByIDParams) (*GetDeviceDatasourceDataByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceDataByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceDataById",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{id}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceDataByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceDataByIDOK), nil

}

/*
GetDeviceDatasourceDataByIDJSON gets device datasource data raw response
*/
func (a *Client) GetDeviceDatasourceDataByIDJSON(params *GetDeviceDatasourceDataByIDJSONParams) (*GetDeviceDatasourceDataByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceDataByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceDataByIdJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{id}/data?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceDataByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceDataByIDJSONOK), nil

}

/*
GetDeviceDatasourceInstanceAlertSettingListOfDSI gets a list of alert settings for a device datasource instance
*/
func (a *Client) GetDeviceDatasourceInstanceAlertSettingListOfDSI(params *GetDeviceDatasourceInstanceAlertSettingListOfDSIParams) (*GetDeviceDatasourceInstanceAlertSettingListOfDSIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceAlertSettingListOfDSIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceAlertSettingListOfDSI",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/alertsettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceAlertSettingListOfDSIReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceAlertSettingListOfDSIOK), nil

}

/*
GetDeviceDatasourceInstanceAlertSettingListOfDSIJSON gets a list of alert settings for a device datasource instance raw response
*/
func (a *Client) GetDeviceDatasourceInstanceAlertSettingListOfDSIJSON(params *GetDeviceDatasourceInstanceAlertSettingListOfDSIJSONParams) (*GetDeviceDatasourceInstanceAlertSettingListOfDSIJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceAlertSettingListOfDSIJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceAlertSettingListOfDSIJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/alertsettings?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceAlertSettingListOfDSIJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceAlertSettingListOfDSIJSONOK), nil

}

/*
GetDeviceDatasourceInstanceByID gets device instance
*/
func (a *Client) GetDeviceDatasourceInstanceByID(params *GetDeviceDatasourceInstanceByIDParams) (*GetDeviceDatasourceInstanceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceById",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceByIDOK), nil

}

/*
GetDeviceDatasourceInstanceByIDJSON gets device instance raw response
*/
func (a *Client) GetDeviceDatasourceInstanceByIDJSON(params *GetDeviceDatasourceInstanceByIDJSONParams) (*GetDeviceDatasourceInstanceByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceByIdJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceByIDJSONOK), nil

}

/*
GetDeviceDatasourceInstanceData gets device instance data
*/
func (a *Client) GetDeviceDatasourceInstanceData(params *GetDeviceDatasourceInstanceDataParams) (*GetDeviceDatasourceInstanceDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceData",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceDataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceDataOK), nil

}

/*
GetDeviceDatasourceInstanceDataJSON gets device instance data raw response
*/
func (a *Client) GetDeviceDatasourceInstanceDataJSON(params *GetDeviceDatasourceInstanceDataJSONParams) (*GetDeviceDatasourceInstanceDataJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceDataJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceDataJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/data?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceDataJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceDataJSONOK), nil

}

/*
GetDeviceDatasourceInstanceGraphData gets device instance graph data
*/
func (a *Client) GetDeviceDatasourceInstanceGraphData(params *GetDeviceDatasourceInstanceGraphDataParams) (*GetDeviceDatasourceInstanceGraphDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceGraphDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceGraphData",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/graphs/{graphId}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceGraphDataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceGraphDataOK), nil

}

/*
GetDeviceDatasourceInstanceGraphDataJSON gets device instance graph data raw response
*/
func (a *Client) GetDeviceDatasourceInstanceGraphDataJSON(params *GetDeviceDatasourceInstanceGraphDataJSONParams) (*GetDeviceDatasourceInstanceGraphDataJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceGraphDataJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceGraphDataJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/graphs/{graphId}/data?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceGraphDataJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceGraphDataJSONOK), nil

}

/*
GetDeviceDatasourceInstanceGroupByID gets device datasource instance group
*/
func (a *Client) GetDeviceDatasourceInstanceGroupByID(params *GetDeviceDatasourceInstanceGroupByIDParams) (*GetDeviceDatasourceInstanceGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceGroupById",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceGroupByIDOK), nil

}

/*
GetDeviceDatasourceInstanceGroupByIDJSON gets device datasource instance group raw response
*/
func (a *Client) GetDeviceDatasourceInstanceGroupByIDJSON(params *GetDeviceDatasourceInstanceGroupByIDJSONParams) (*GetDeviceDatasourceInstanceGroupByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceGroupByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceGroupByIdJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceGroupByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceGroupByIDJSONOK), nil

}

/*
GetDeviceDatasourceInstanceGroupList gets device datasource instance group list
*/
func (a *Client) GetDeviceDatasourceInstanceGroupList(params *GetDeviceDatasourceInstanceGroupListParams) (*GetDeviceDatasourceInstanceGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceGroupList",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceGroupListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceGroupListOK), nil

}

/*
GetDeviceDatasourceInstanceGroupListJSON gets device datasource instance group list raw response
*/
func (a *Client) GetDeviceDatasourceInstanceGroupListJSON(params *GetDeviceDatasourceInstanceGroupListJSONParams) (*GetDeviceDatasourceInstanceGroupListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceGroupListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceGroupListJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceGroupListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceGroupListJSONOK), nil

}

/*
GetDeviceDatasourceInstanceGroupOverviewGraphData gets device instance group overview graph data
*/
func (a *Client) GetDeviceDatasourceInstanceGroupOverviewGraphData(params *GetDeviceDatasourceInstanceGroupOverviewGraphDataParams) (*GetDeviceDatasourceInstanceGroupOverviewGraphDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceGroupOverviewGraphDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceGroupOverviewGraphData",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups/{dsigId}/graphs/{ographId}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceGroupOverviewGraphDataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceGroupOverviewGraphDataOK), nil

}

/*
GetDeviceDatasourceInstanceGroupOverviewGraphDataJSON gets device instance group overview graph data raw response
*/
func (a *Client) GetDeviceDatasourceInstanceGroupOverviewGraphDataJSON(params *GetDeviceDatasourceInstanceGroupOverviewGraphDataJSONParams) (*GetDeviceDatasourceInstanceGroupOverviewGraphDataJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceGroupOverviewGraphDataJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceGroupOverviewGraphDataJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups/{dsigId}/graphs/{ographId}/data?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceGroupOverviewGraphDataJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceGroupOverviewGraphDataJSONOK), nil

}

/*
GetDeviceDatasourceInstanceList gets device instance list
*/
func (a *Client) GetDeviceDatasourceInstanceList(params *GetDeviceDatasourceInstanceListParams) (*GetDeviceDatasourceInstanceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceList",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceListOK), nil

}

/*
GetDeviceDatasourceInstanceListJSON gets device instance list raw response
*/
func (a *Client) GetDeviceDatasourceInstanceListJSON(params *GetDeviceDatasourceInstanceListJSONParams) (*GetDeviceDatasourceInstanceListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceListJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceListJSONOK), nil

}

/*
GetDeviceDatasourceInstanceSDTHistory gets device instance SDT history
*/
func (a *Client) GetDeviceDatasourceInstanceSDTHistory(params *GetDeviceDatasourceInstanceSDTHistoryParams) (*GetDeviceDatasourceInstanceSDTHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceSDTHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceSDTHistory",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/historysdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceSDTHistoryReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceSDTHistoryOK), nil

}

/*
GetDeviceDatasourceInstanceSDTHistoryJSON gets device instance SDT history raw response
*/
func (a *Client) GetDeviceDatasourceInstanceSDTHistoryJSON(params *GetDeviceDatasourceInstanceSDTHistoryJSONParams) (*GetDeviceDatasourceInstanceSDTHistoryJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceSDTHistoryJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceSDTHistoryJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/historysdts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceSDTHistoryJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceSDTHistoryJSONOK), nil

}

/*
GetDeviceDatasourceList gets device datasource list
*/
func (a *Client) GetDeviceDatasourceList(params *GetDeviceDatasourceListParams) (*GetDeviceDatasourceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceList",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceListOK), nil

}

/*
GetDeviceDatasourceListJSON gets device datasource list raw response
*/
func (a *Client) GetDeviceDatasourceListJSON(params *GetDeviceDatasourceListJSONParams) (*GetDeviceDatasourceListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceListJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceListJSONOK), nil

}

/*
GetDeviceGroupByID gets device group
*/
func (a *Client) GetDeviceGroupByID(params *GetDeviceGroupByIDParams) (*GetDeviceGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupById",
		Method:             "GET",
		PathPattern:        "/device/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupByIDOK), nil

}

/*
GetDeviceGroupByIDJSON gets device group raw response
*/
func (a *Client) GetDeviceGroupByIDJSON(params *GetDeviceGroupByIDJSONParams) (*GetDeviceGroupByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupByIdJson",
		Method:             "GET",
		PathPattern:        "/device/groups/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupByIDJSONOK), nil

}

/*
GetDeviceGroupDatasourceAlertSetting gets device group datasource alert setting
*/
func (a *Client) GetDeviceGroupDatasourceAlertSetting(params *GetDeviceGroupDatasourceAlertSettingParams) (*GetDeviceGroupDatasourceAlertSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupDatasourceAlertSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupDatasourceAlertSetting",
		Method:             "GET",
		PathPattern:        "/device/groups/{deviceGroupId}/datasources/{dsId}/alertsettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupDatasourceAlertSettingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupDatasourceAlertSettingOK), nil

}

/*
GetDeviceGroupDatasourceAlertSettingJSON gets device group datasource alert setting raw response
*/
func (a *Client) GetDeviceGroupDatasourceAlertSettingJSON(params *GetDeviceGroupDatasourceAlertSettingJSONParams) (*GetDeviceGroupDatasourceAlertSettingJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupDatasourceAlertSettingJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupDatasourceAlertSettingJson",
		Method:             "GET",
		PathPattern:        "/device/groups/{deviceGroupId}/datasources/{dsId}/alertsettings?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupDatasourceAlertSettingJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupDatasourceAlertSettingJSONOK), nil

}

/*
GetDeviceGroupDatasourceByID gets device group datasource
*/
func (a *Client) GetDeviceGroupDatasourceByID(params *GetDeviceGroupDatasourceByIDParams) (*GetDeviceGroupDatasourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupDatasourceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupDatasourceById",
		Method:             "GET",
		PathPattern:        "/device/groups/{deviceGroupId}/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupDatasourceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupDatasourceByIDOK), nil

}

/*
GetDeviceGroupDatasourceByIDJSON gets device group datasource raw response
*/
func (a *Client) GetDeviceGroupDatasourceByIDJSON(params *GetDeviceGroupDatasourceByIDJSONParams) (*GetDeviceGroupDatasourceByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupDatasourceByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupDatasourceByIdJson",
		Method:             "GET",
		PathPattern:        "/device/groups/{deviceGroupId}/datasources/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupDatasourceByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupDatasourceByIDJSONOK), nil

}

/*
GetDeviceGroupDatasourceList gets device group datasource list
*/
func (a *Client) GetDeviceGroupDatasourceList(params *GetDeviceGroupDatasourceListParams) (*GetDeviceGroupDatasourceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupDatasourceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupDatasourceList",
		Method:             "GET",
		PathPattern:        "/device/groups/{deviceGroupId}/datasources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupDatasourceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupDatasourceListOK), nil

}

/*
GetDeviceGroupDatasourceListJSON gets device group datasource list raw response
*/
func (a *Client) GetDeviceGroupDatasourceListJSON(params *GetDeviceGroupDatasourceListJSONParams) (*GetDeviceGroupDatasourceListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupDatasourceListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupDatasourceListJson",
		Method:             "GET",
		PathPattern:        "/device/groups/{deviceGroupId}/datasources?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupDatasourceListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupDatasourceListJSONOK), nil

}

/*
GetDeviceGroupList gets device group list
*/
func (a *Client) GetDeviceGroupList(params *GetDeviceGroupListParams) (*GetDeviceGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupList",
		Method:             "GET",
		PathPattern:        "/device/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupListOK), nil

}

/*
GetDeviceGroupListJSON gets device group list raw response
*/
func (a *Client) GetDeviceGroupListJSON(params *GetDeviceGroupListJSONParams) (*GetDeviceGroupListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupListJson",
		Method:             "GET",
		PathPattern:        "/device/groups?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupListJSONOK), nil

}

/*
GetDeviceGroupPropertyByName gets device group property by name
*/
func (a *Client) GetDeviceGroupPropertyByName(params *GetDeviceGroupPropertyByNameParams) (*GetDeviceGroupPropertyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupPropertyByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupPropertyByName",
		Method:             "GET",
		PathPattern:        "/device/groups/{gid}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupPropertyByNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupPropertyByNameOK), nil

}

/*
GetDeviceGroupPropertyByNameJSON gets device group property by name raw response
*/
func (a *Client) GetDeviceGroupPropertyByNameJSON(params *GetDeviceGroupPropertyByNameJSONParams) (*GetDeviceGroupPropertyByNameJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupPropertyByNameJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupPropertyByNameJson",
		Method:             "GET",
		PathPattern:        "/device/groups/{gid}/properties/{name}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupPropertyByNameJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupPropertyByNameJSONOK), nil

}

/*
GetDeviceGroupPropertyList gets device group properties
*/
func (a *Client) GetDeviceGroupPropertyList(params *GetDeviceGroupPropertyListParams) (*GetDeviceGroupPropertyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupPropertyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupPropertyList",
		Method:             "GET",
		PathPattern:        "/device/groups/{gid}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupPropertyListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupPropertyListOK), nil

}

/*
GetDeviceGroupPropertyListJSON gets device group properties raw response
*/
func (a *Client) GetDeviceGroupPropertyListJSON(params *GetDeviceGroupPropertyListJSONParams) (*GetDeviceGroupPropertyListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupPropertyListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupPropertyListJson",
		Method:             "GET",
		PathPattern:        "/device/groups/{gid}/properties?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupPropertyListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupPropertyListJSONOK), nil

}

/*
GetDeviceGroupSDTList gets device group s d ts
*/
func (a *Client) GetDeviceGroupSDTList(params *GetDeviceGroupSDTListParams) (*GetDeviceGroupSDTListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupSDTListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupSDTList",
		Method:             "GET",
		PathPattern:        "/device/groups/{id}/sdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupSDTListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupSDTListOK), nil

}

/*
GetDeviceGroupSDTListJSON gets device group s d ts raw response
*/
func (a *Client) GetDeviceGroupSDTListJSON(params *GetDeviceGroupSDTListJSONParams) (*GetDeviceGroupSDTListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupSDTListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupSDTListJson",
		Method:             "GET",
		PathPattern:        "/device/groups/{id}/sdts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupSDTListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupSDTListJSONOK), nil

}

/*
GetDeviceInstanceGraphDataOnlyByInstanceID gets device instance data
*/
func (a *Client) GetDeviceInstanceGraphDataOnlyByInstanceID(params *GetDeviceInstanceGraphDataOnlyByInstanceIDParams) (*GetDeviceInstanceGraphDataOnlyByInstanceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceInstanceGraphDataOnlyByInstanceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceInstanceGraphDataOnlyByInstanceId",
		Method:             "GET",
		PathPattern:        "/device/devicedatasourceinstances/{instanceId}/graphs/{graphId}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceInstanceGraphDataOnlyByInstanceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceInstanceGraphDataOnlyByInstanceIDOK), nil

}

/*
GetDeviceInstanceGraphDataOnlyByInstanceIDJSON gets device instance data raw response
*/
func (a *Client) GetDeviceInstanceGraphDataOnlyByInstanceIDJSON(params *GetDeviceInstanceGraphDataOnlyByInstanceIDJSONParams) (*GetDeviceInstanceGraphDataOnlyByInstanceIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceInstanceGraphDataOnlyByInstanceIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceInstanceGraphDataOnlyByInstanceIdJson",
		Method:             "GET",
		PathPattern:        "/device/devicedatasourceinstances/{instanceId}/graphs/{graphId}/data?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceInstanceGraphDataOnlyByInstanceIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceInstanceGraphDataOnlyByInstanceIDJSONOK), nil

}

/*
GetDeviceInstanceList gets device instance list
*/
func (a *Client) GetDeviceInstanceList(params *GetDeviceInstanceListParams) (*GetDeviceInstanceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceInstanceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceInstanceList",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceInstanceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceInstanceListOK), nil

}

/*
GetDeviceInstanceListJSON gets device instance list raw response
*/
func (a *Client) GetDeviceInstanceListJSON(params *GetDeviceInstanceListJSONParams) (*GetDeviceInstanceListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceInstanceListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceInstanceListJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/instances?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceInstanceListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceInstanceListJSONOK), nil

}

/*
GetDeviceList gets device list
*/
func (a *Client) GetDeviceList(params *GetDeviceListParams) (*GetDeviceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceList",
		Method:             "GET",
		PathPattern:        "/device/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceListOK), nil

}

/*
GetDeviceListJSON gets device list raw response
*/
func (a *Client) GetDeviceListJSON(params *GetDeviceListJSONParams) (*GetDeviceListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceListJson",
		Method:             "GET",
		PathPattern:        "/device/devices?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceListJSONOK), nil

}

/*
GetDevicePropertyByName gets device property by name
*/
func (a *Client) GetDevicePropertyByName(params *GetDevicePropertyByNameParams) (*GetDevicePropertyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicePropertyByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicePropertyByName",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDevicePropertyByNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDevicePropertyByNameOK), nil

}

/*
GetDevicePropertyByNameJSON gets device property by name raw response
*/
func (a *Client) GetDevicePropertyByNameJSON(params *GetDevicePropertyByNameJSONParams) (*GetDevicePropertyByNameJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicePropertyByNameJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicePropertyByNameJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/properties/{name}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDevicePropertyByNameJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDevicePropertyByNameJSONOK), nil

}

/*
GetDevicePropertyList gets device properties
*/
func (a *Client) GetDevicePropertyList(params *GetDevicePropertyListParams) (*GetDevicePropertyListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicePropertyListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicePropertyList",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDevicePropertyListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDevicePropertyListOK), nil

}

/*
GetDevicePropertyListJSON gets device properties raw response
*/
func (a *Client) GetDevicePropertyListJSON(params *GetDevicePropertyListJSONParams) (*GetDevicePropertyListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicePropertyListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicePropertyListJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/properties?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDevicePropertyListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDevicePropertyListJSONOK), nil

}

/*
GetEscalationChainByID gets escalation chain by id
*/
func (a *Client) GetEscalationChainByID(params *GetEscalationChainByIDParams) (*GetEscalationChainByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEscalationChainByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEscalationChainById",
		Method:             "GET",
		PathPattern:        "/setting/alert/chains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEscalationChainByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEscalationChainByIDOK), nil

}

/*
GetEscalationChainByIDJSON gets escalation chain by id raw response
*/
func (a *Client) GetEscalationChainByIDJSON(params *GetEscalationChainByIDJSONParams) (*GetEscalationChainByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEscalationChainByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEscalationChainByIdJson",
		Method:             "GET",
		PathPattern:        "/setting/alert/chains/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEscalationChainByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEscalationChainByIDJSONOK), nil

}

/*
GetEscalationChainList gets escalation chain list
*/
func (a *Client) GetEscalationChainList(params *GetEscalationChainListParams) (*GetEscalationChainListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEscalationChainListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEscalationChainList",
		Method:             "GET",
		PathPattern:        "/setting/alert/chains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEscalationChainListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEscalationChainListOK), nil

}

/*
GetEscalationChainListJSON gets escalation chain list raw response
*/
func (a *Client) GetEscalationChainListJSON(params *GetEscalationChainListJSONParams) (*GetEscalationChainListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEscalationChainListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEscalationChainListJson",
		Method:             "GET",
		PathPattern:        "/setting/alert/chains?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEscalationChainListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEscalationChainListJSONOK), nil

}

/*
GetEventSourceList gets event source list
*/
func (a *Client) GetEventSourceList(params *GetEventSourceListParams) (*GetEventSourceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventSourceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventSourceList",
		Method:             "GET",
		PathPattern:        "/setting/eventsources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventSourceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventSourceListOK), nil

}

/*
GetEventSourceListJSON gets event source list raw response
*/
func (a *Client) GetEventSourceListJSON(params *GetEventSourceListJSONParams) (*GetEventSourceListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventSourceListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventSourceListJson",
		Method:             "GET",
		PathPattern:        "/setting/eventsources?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventSourceListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventSourceListJSONOK), nil

}

/*
GetExternalAPIStats gets external api stats info
*/
func (a *Client) GetExternalAPIStats(params *GetExternalAPIStatsParams) (*GetExternalAPIStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExternalAPIStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalApiStats",
		Method:             "GET",
		PathPattern:        "/apiStats/externalApis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalAPIStatsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalAPIStatsOK), nil

}

/*
GetExternalAPIStatsJSON gets external api stats info raw response
*/
func (a *Client) GetExternalAPIStatsJSON(params *GetExternalAPIStatsJSONParams) (*GetExternalAPIStatsJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExternalAPIStatsJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExternalApiStatsJson",
		Method:             "GET",
		PathPattern:        "/apiStats/externalApis?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExternalAPIStatsJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExternalAPIStatsJSONOK), nil

}

/*
GetImmediateDeviceListByDeviceGroupID gets immediate devices under group
*/
func (a *Client) GetImmediateDeviceListByDeviceGroupID(params *GetImmediateDeviceListByDeviceGroupIDParams) (*GetImmediateDeviceListByDeviceGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImmediateDeviceListByDeviceGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImmediateDeviceListByDeviceGroupId",
		Method:             "GET",
		PathPattern:        "/device/groups/{id}/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImmediateDeviceListByDeviceGroupIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImmediateDeviceListByDeviceGroupIDOK), nil

}

/*
GetImmediateDeviceListByDeviceGroupIDJSON gets immediate devices under group raw response
*/
func (a *Client) GetImmediateDeviceListByDeviceGroupIDJSON(params *GetImmediateDeviceListByDeviceGroupIDJSONParams) (*GetImmediateDeviceListByDeviceGroupIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImmediateDeviceListByDeviceGroupIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImmediateDeviceListByDeviceGroupIdJson",
		Method:             "GET",
		PathPattern:        "/device/groups/{id}/devices?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImmediateDeviceListByDeviceGroupIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImmediateDeviceListByDeviceGroupIDJSONOK), nil

}

/*
GetImmediateWebsiteListByWebsiteGroupID gets a list of websites for a group response may contain extra fields depending upon the type of check ping check pipe web check being added
*/
func (a *Client) GetImmediateWebsiteListByWebsiteGroupID(params *GetImmediateWebsiteListByWebsiteGroupIDParams) (*GetImmediateWebsiteListByWebsiteGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImmediateWebsiteListByWebsiteGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImmediateWebsiteListByWebsiteGroupId",
		Method:             "GET",
		PathPattern:        "/website/groups/{id}/websites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImmediateWebsiteListByWebsiteGroupIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImmediateWebsiteListByWebsiteGroupIDOK), nil

}

/*
GetImmediateWebsiteListByWebsiteGroupIDJSON gets a list of websites for a group response may contain extra fields depending upon the type of check ping check pipe web check being added raw response
*/
func (a *Client) GetImmediateWebsiteListByWebsiteGroupIDJSON(params *GetImmediateWebsiteListByWebsiteGroupIDJSONParams) (*GetImmediateWebsiteListByWebsiteGroupIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImmediateWebsiteListByWebsiteGroupIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImmediateWebsiteListByWebsiteGroupIdJson",
		Method:             "GET",
		PathPattern:        "/website/groups/{id}/websites?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImmediateWebsiteListByWebsiteGroupIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImmediateWebsiteListByWebsiteGroupIDJSONOK), nil

}

/*
GetIntegrationAuditLogs gets integration audit logs list
*/
func (a *Client) GetIntegrationAuditLogs(params *GetIntegrationAuditLogsParams) (*GetIntegrationAuditLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationAuditLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationAuditLogs",
		Method:             "GET",
		PathPattern:        "/setting/integrations/auditlogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationAuditLogsReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationAuditLogsOK), nil

}

/*
GetIntegrationAuditLogsJSON gets integration audit logs list raw response
*/
func (a *Client) GetIntegrationAuditLogsJSON(params *GetIntegrationAuditLogsJSONParams) (*GetIntegrationAuditLogsJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationAuditLogsJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegrationAuditLogsJson",
		Method:             "GET",
		PathPattern:        "/setting/integrations/auditlogs?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIntegrationAuditLogsJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationAuditLogsJSONOK), nil

}

/*
GetMetricsUsage gets metrics usage
*/
func (a *Client) GetMetricsUsage(params *GetMetricsUsageParams) (*GetMetricsUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetricsUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMetricsUsage",
		Method:             "GET",
		PathPattern:        "/metrics/usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetricsUsageReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMetricsUsageOK), nil

}

/*
GetMetricsUsageJSON gets metrics usage raw response
*/
func (a *Client) GetMetricsUsageJSON(params *GetMetricsUsageJSONParams) (*GetMetricsUsageJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetricsUsageJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMetricsUsageJson",
		Method:             "GET",
		PathPattern:        "/metrics/usage?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMetricsUsageJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMetricsUsageJSONOK), nil

}

/*
GetNetflowFlowList gets netflow flows
*/
func (a *Client) GetNetflowFlowList(params *GetNetflowFlowListParams) (*GetNetflowFlowListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetflowFlowListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetflowFlowList",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/flows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetflowFlowListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetflowFlowListOK), nil

}

/*
GetNetflowFlowListJSON gets netflow flows raw response
*/
func (a *Client) GetNetflowFlowListJSON(params *GetNetflowFlowListJSONParams) (*GetNetflowFlowListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetflowFlowListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetflowFlowListJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/flows?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetflowFlowListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetflowFlowListJSONOK), nil

}

/*
GetNetscanByID gets netscan by id
*/
func (a *Client) GetNetscanByID(params *GetNetscanByIDParams) (*GetNetscanByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetscanByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetscanById",
		Method:             "GET",
		PathPattern:        "/setting/netscans/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetscanByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetscanByIDOK), nil

}

/*
GetNetscanByIDJSON gets netscan by id raw response
*/
func (a *Client) GetNetscanByIDJSON(params *GetNetscanByIDJSONParams) (*GetNetscanByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetscanByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetscanByIdJson",
		Method:             "GET",
		PathPattern:        "/setting/netscans/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetscanByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetscanByIDJSONOK), nil

}

/*
GetNetscanList gets netscan list
*/
func (a *Client) GetNetscanList(params *GetNetscanListParams) (*GetNetscanListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetscanListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetscanList",
		Method:             "GET",
		PathPattern:        "/setting/netscans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetscanListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetscanListOK), nil

}

/*
GetNetscanListJSON gets netscan list raw response
*/
func (a *Client) GetNetscanListJSON(params *GetNetscanListJSONParams) (*GetNetscanListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetscanListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetscanListJson",
		Method:             "GET",
		PathPattern:        "/setting/netscans?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetscanListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetscanListJSONOK), nil

}

/*
GetOpsNoteList gets opsnote list
*/
func (a *Client) GetOpsNoteList(params *GetOpsNoteListParams) (*GetOpsNoteListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOpsNoteListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOpsNoteList",
		Method:             "GET",
		PathPattern:        "/setting/opsnotes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOpsNoteListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOpsNoteListOK), nil

}

/*
GetOpsNoteListJSON gets opsnote list raw response
*/
func (a *Client) GetOpsNoteListJSON(params *GetOpsNoteListJSONParams) (*GetOpsNoteListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOpsNoteListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOpsNoteListJson",
		Method:             "GET",
		PathPattern:        "/setting/opsnotes?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOpsNoteListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOpsNoteListJSONOK), nil

}

/*
GetRecipientGroupByID gets recipient group by id
*/
func (a *Client) GetRecipientGroupByID(params *GetRecipientGroupByIDParams) (*GetRecipientGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecipientGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRecipientGroupById",
		Method:             "GET",
		PathPattern:        "/setting/recipientgroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecipientGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecipientGroupByIDOK), nil

}

/*
GetRecipientGroupByIDJSON gets recipient group by id raw response
*/
func (a *Client) GetRecipientGroupByIDJSON(params *GetRecipientGroupByIDJSONParams) (*GetRecipientGroupByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecipientGroupByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRecipientGroupByIdJson",
		Method:             "GET",
		PathPattern:        "/setting/recipientgroups/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecipientGroupByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecipientGroupByIDJSONOK), nil

}

/*
GetRecipientGroupList gets recipient group list
*/
func (a *Client) GetRecipientGroupList(params *GetRecipientGroupListParams) (*GetRecipientGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecipientGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRecipientGroupList",
		Method:             "GET",
		PathPattern:        "/setting/recipientgroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecipientGroupListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecipientGroupListOK), nil

}

/*
GetRecipientGroupListJSON gets recipient group list raw response
*/
func (a *Client) GetRecipientGroupListJSON(params *GetRecipientGroupListJSONParams) (*GetRecipientGroupListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecipientGroupListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRecipientGroupListJson",
		Method:             "GET",
		PathPattern:        "/setting/recipientgroups?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecipientGroupListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecipientGroupListJSONOK), nil

}

/*
GetReportByID gets report by id
*/
func (a *Client) GetReportByID(params *GetReportByIDParams) (*GetReportByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportById",
		Method:             "GET",
		PathPattern:        "/report/reports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportByIDOK), nil

}

/*
GetReportByIDJSON gets report by id raw response
*/
func (a *Client) GetReportByIDJSON(params *GetReportByIDJSONParams) (*GetReportByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportByIdJson",
		Method:             "GET",
		PathPattern:        "/report/reports/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportByIDJSONOK), nil

}

/*
GetReportGroupByID gets report group by id
*/
func (a *Client) GetReportGroupByID(params *GetReportGroupByIDParams) (*GetReportGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportGroupById",
		Method:             "GET",
		PathPattern:        "/report/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportGroupByIDOK), nil

}

/*
GetReportGroupByIDJSON gets report group by id raw response
*/
func (a *Client) GetReportGroupByIDJSON(params *GetReportGroupByIDJSONParams) (*GetReportGroupByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportGroupByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportGroupByIdJson",
		Method:             "GET",
		PathPattern:        "/report/groups/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportGroupByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportGroupByIDJSONOK), nil

}

/*
GetReportGroupList gets report group list
*/
func (a *Client) GetReportGroupList(params *GetReportGroupListParams) (*GetReportGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportGroupList",
		Method:             "GET",
		PathPattern:        "/report/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportGroupListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportGroupListOK), nil

}

/*
GetReportGroupListJSON gets report group list raw response
*/
func (a *Client) GetReportGroupListJSON(params *GetReportGroupListJSONParams) (*GetReportGroupListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportGroupListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportGroupListJson",
		Method:             "GET",
		PathPattern:        "/report/groups?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportGroupListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportGroupListJSONOK), nil

}

/*
GetReportList gets report list
*/
func (a *Client) GetReportList(params *GetReportListParams) (*GetReportListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportList",
		Method:             "GET",
		PathPattern:        "/report/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportListOK), nil

}

/*
GetReportListJSON gets report list raw response
*/
func (a *Client) GetReportListJSON(params *GetReportListJSONParams) (*GetReportListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportListJson",
		Method:             "GET",
		PathPattern:        "/report/reports?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportListJSONOK), nil

}

/*
GetRoleByID gets role by id
*/
func (a *Client) GetRoleByID(params *GetRoleByIDParams) (*GetRoleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoleById",
		Method:             "GET",
		PathPattern:        "/setting/roles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoleByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoleByIDOK), nil

}

/*
GetRoleByIDJSON gets role by id raw response
*/
func (a *Client) GetRoleByIDJSON(params *GetRoleByIDJSONParams) (*GetRoleByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoleByIdJson",
		Method:             "GET",
		PathPattern:        "/setting/roles/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoleByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoleByIDJSONOK), nil

}

/*
GetRoleList gets role list
*/
func (a *Client) GetRoleList(params *GetRoleListParams) (*GetRoleListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoleList",
		Method:             "GET",
		PathPattern:        "/setting/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoleListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoleListOK), nil

}

/*
GetRoleListJSON gets role list raw response
*/
func (a *Client) GetRoleListJSON(params *GetRoleListJSONParams) (*GetRoleListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRoleListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRoleListJson",
		Method:             "GET",
		PathPattern:        "/setting/roles?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRoleListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRoleListJSONOK), nil

}

/*
GetSDTByID gets SDT by id response may contain extra fields depending upon the type of SDT of given id
*/
func (a *Client) GetSDTByID(params *GetSDTByIDParams) (*GetSDTByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTById",
		Method:             "GET",
		PathPattern:        "/sdt/sdts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTByIDOK), nil

}

/*
GetSDTByIDJSON gets SDT by id response may contain extra fields depending upon the type of SDT of given id raw response
*/
func (a *Client) GetSDTByIDJSON(params *GetSDTByIDJSONParams) (*GetSDTByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTByIdJson",
		Method:             "GET",
		PathPattern:        "/sdt/sdts/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTByIDJSONOK), nil

}

/*
GetSDTHistoryByDeviceDataSourceID gets SDT history for the device data source
*/
func (a *Client) GetSDTHistoryByDeviceDataSourceID(params *GetSDTHistoryByDeviceDataSourceIDParams) (*GetSDTHistoryByDeviceDataSourceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTHistoryByDeviceDataSourceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTHistoryByDeviceDataSourceId",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{id}/historysdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTHistoryByDeviceDataSourceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTHistoryByDeviceDataSourceIDOK), nil

}

/*
GetSDTHistoryByDeviceDataSourceIDJSON gets SDT history for the device data source raw response
*/
func (a *Client) GetSDTHistoryByDeviceDataSourceIDJSON(params *GetSDTHistoryByDeviceDataSourceIDJSONParams) (*GetSDTHistoryByDeviceDataSourceIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTHistoryByDeviceDataSourceIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTHistoryByDeviceDataSourceIdJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{id}/historysdts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTHistoryByDeviceDataSourceIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTHistoryByDeviceDataSourceIDJSONOK), nil

}

/*
GetSDTHistoryByDeviceGroupID gets SDT history for the group
*/
func (a *Client) GetSDTHistoryByDeviceGroupID(params *GetSDTHistoryByDeviceGroupIDParams) (*GetSDTHistoryByDeviceGroupIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTHistoryByDeviceGroupIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTHistoryByDeviceGroupId",
		Method:             "GET",
		PathPattern:        "/device/groups/{id}/historysdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTHistoryByDeviceGroupIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTHistoryByDeviceGroupIDOK), nil

}

/*
GetSDTHistoryByDeviceGroupIDJSON gets SDT history for the group raw response
*/
func (a *Client) GetSDTHistoryByDeviceGroupIDJSON(params *GetSDTHistoryByDeviceGroupIDJSONParams) (*GetSDTHistoryByDeviceGroupIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTHistoryByDeviceGroupIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTHistoryByDeviceGroupIdJson",
		Method:             "GET",
		PathPattern:        "/device/groups/{id}/historysdts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTHistoryByDeviceGroupIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTHistoryByDeviceGroupIDJSONOK), nil

}

/*
GetSDTHistoryByDeviceID gets SDT history for the device
*/
func (a *Client) GetSDTHistoryByDeviceID(params *GetSDTHistoryByDeviceIDParams) (*GetSDTHistoryByDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTHistoryByDeviceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTHistoryByDeviceId",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/historysdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTHistoryByDeviceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTHistoryByDeviceIDOK), nil

}

/*
GetSDTHistoryByDeviceIDJSON gets SDT history for the device raw response
*/
func (a *Client) GetSDTHistoryByDeviceIDJSON(params *GetSDTHistoryByDeviceIDJSONParams) (*GetSDTHistoryByDeviceIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTHistoryByDeviceIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTHistoryByDeviceIdJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/historysdts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTHistoryByDeviceIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTHistoryByDeviceIDJSONOK), nil

}

/*
GetSDTHistoryByWebsiteID gets SDT history for the website response may contain extra fields depending upon the type of SDT
*/
func (a *Client) GetSDTHistoryByWebsiteID(params *GetSDTHistoryByWebsiteIDParams) (*GetSDTHistoryByWebsiteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTHistoryByWebsiteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTHistoryByWebsiteId",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/historysdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTHistoryByWebsiteIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTHistoryByWebsiteIDOK), nil

}

/*
GetSDTHistoryByWebsiteIDJSON gets SDT history for the website response may contain extra fields depending upon the type of SDT raw response
*/
func (a *Client) GetSDTHistoryByWebsiteIDJSON(params *GetSDTHistoryByWebsiteIDJSONParams) (*GetSDTHistoryByWebsiteIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTHistoryByWebsiteIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTHistoryByWebsiteIdJson",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/historysdts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTHistoryByWebsiteIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTHistoryByWebsiteIDJSONOK), nil

}

/*
GetSDTList gets SDT list
*/
func (a *Client) GetSDTList(params *GetSDTListParams) (*GetSDTListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTList",
		Method:             "GET",
		PathPattern:        "/sdt/sdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTListOK), nil

}

/*
GetSDTListJSON gets SDT list raw response
*/
func (a *Client) GetSDTListJSON(params *GetSDTListJSONParams) (*GetSDTListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSDTListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSDTListJson",
		Method:             "GET",
		PathPattern:        "/sdt/sdts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSDTListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSDTListJSONOK), nil

}

/*
GetSiteMonitorCheckPointList gets website checkpoint list
*/
func (a *Client) GetSiteMonitorCheckPointList(params *GetSiteMonitorCheckPointListParams) (*GetSiteMonitorCheckPointListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteMonitorCheckPointListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSiteMonitorCheckPointList",
		Method:             "GET",
		PathPattern:        "/website/smcheckpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSiteMonitorCheckPointListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSiteMonitorCheckPointListOK), nil

}

/*
GetSiteMonitorCheckPointListJSON gets website checkpoint list raw response
*/
func (a *Client) GetSiteMonitorCheckPointListJSON(params *GetSiteMonitorCheckPointListJSONParams) (*GetSiteMonitorCheckPointListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteMonitorCheckPointListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSiteMonitorCheckPointListJson",
		Method:             "GET",
		PathPattern:        "/website/smcheckpoints?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSiteMonitorCheckPointListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSiteMonitorCheckPointListJSONOK), nil

}

/*
GetTopTalkersGraph gets top talkers graph
*/
func (a *Client) GetTopTalkersGraph(params *GetTopTalkersGraphParams) (*GetTopTalkersGraphOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTopTalkersGraphParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTopTalkersGraph",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/topTalkersGraph",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTopTalkersGraphReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTopTalkersGraphOK), nil

}

/*
GetTopTalkersGraphJSON gets top talkers graph raw response
*/
func (a *Client) GetTopTalkersGraphJSON(params *GetTopTalkersGraphJSONParams) (*GetTopTalkersGraphJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTopTalkersGraphJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTopTalkersGraphJson",
		Method:             "GET",
		PathPattern:        "/device/devices/{id}/topTalkersGraph?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTopTalkersGraphJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTopTalkersGraphJSONOK), nil

}

/*
GetUnmonitoredDeviceList gets unmonitored device list
*/
func (a *Client) GetUnmonitoredDeviceList(params *GetUnmonitoredDeviceListParams) (*GetUnmonitoredDeviceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUnmonitoredDeviceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUnmonitoredDeviceList",
		Method:             "GET",
		PathPattern:        "/device/unmonitoreddevices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUnmonitoredDeviceListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUnmonitoredDeviceListOK), nil

}

/*
GetUnmonitoredDeviceListJSON gets unmonitored device list raw response
*/
func (a *Client) GetUnmonitoredDeviceListJSON(params *GetUnmonitoredDeviceListJSONParams) (*GetUnmonitoredDeviceListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUnmonitoredDeviceListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUnmonitoredDeviceListJson",
		Method:             "GET",
		PathPattern:        "/device/unmonitoreddevices?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUnmonitoredDeviceListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUnmonitoredDeviceListJSONOK), nil

}

/*
GetUpdateReasonListByConfigSourceID gets update history for a config source
*/
func (a *Client) GetUpdateReasonListByConfigSourceID(params *GetUpdateReasonListByConfigSourceIDParams) (*GetUpdateReasonListByConfigSourceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpdateReasonListByConfigSourceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUpdateReasonListByConfigSourceId",
		Method:             "GET",
		PathPattern:        "/setting/configsources/{id}/updatereasons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUpdateReasonListByConfigSourceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUpdateReasonListByConfigSourceIDOK), nil

}

/*
GetUpdateReasonListByConfigSourceIDJSON gets update history for a config source raw response
*/
func (a *Client) GetUpdateReasonListByConfigSourceIDJSON(params *GetUpdateReasonListByConfigSourceIDJSONParams) (*GetUpdateReasonListByConfigSourceIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpdateReasonListByConfigSourceIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUpdateReasonListByConfigSourceIdJson",
		Method:             "GET",
		PathPattern:        "/setting/configsources/{id}/updatereasons?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUpdateReasonListByConfigSourceIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUpdateReasonListByConfigSourceIDJSONOK), nil

}

/*
GetUpdateReasonListByDataSourceID gets update history for a datasource
*/
func (a *Client) GetUpdateReasonListByDataSourceID(params *GetUpdateReasonListByDataSourceIDParams) (*GetUpdateReasonListByDataSourceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpdateReasonListByDataSourceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUpdateReasonListByDataSourceId",
		Method:             "GET",
		PathPattern:        "/setting/datasources/{id}/updatereasons",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUpdateReasonListByDataSourceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUpdateReasonListByDataSourceIDOK), nil

}

/*
GetUpdateReasonListByDataSourceIDJSON gets update history for a datasource raw response
*/
func (a *Client) GetUpdateReasonListByDataSourceIDJSON(params *GetUpdateReasonListByDataSourceIDJSONParams) (*GetUpdateReasonListByDataSourceIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpdateReasonListByDataSourceIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUpdateReasonListByDataSourceIdJson",
		Method:             "GET",
		PathPattern:        "/setting/datasources/{id}/updatereasons?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUpdateReasonListByDataSourceIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUpdateReasonListByDataSourceIDJSONOK), nil

}

/*
GetWebsiteAlertListByWebsiteID gets alerts for a website
*/
func (a *Client) GetWebsiteAlertListByWebsiteID(params *GetWebsiteAlertListByWebsiteIDParams) (*GetWebsiteAlertListByWebsiteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteAlertListByWebsiteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteAlertListByWebsiteId",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteAlertListByWebsiteIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteAlertListByWebsiteIDOK), nil

}

/*
GetWebsiteAlertListByWebsiteIDJSON gets alerts for a website raw response
*/
func (a *Client) GetWebsiteAlertListByWebsiteIDJSON(params *GetWebsiteAlertListByWebsiteIDJSONParams) (*GetWebsiteAlertListByWebsiteIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteAlertListByWebsiteIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteAlertListByWebsiteIdJson",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/alerts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteAlertListByWebsiteIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteAlertListByWebsiteIDJSONOK), nil

}

/*
GetWebsiteByID gets website by id
*/
func (a *Client) GetWebsiteByID(params *GetWebsiteByIDParams) (*GetWebsiteByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteById",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteByIDOK), nil

}

/*
GetWebsiteByIDJSON gets website by id raw response
*/
func (a *Client) GetWebsiteByIDJSON(params *GetWebsiteByIDJSONParams) (*GetWebsiteByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteByIdJson",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteByIDJSONOK), nil

}

/*
GetWebsiteCheckpointDataByID gets data for a website checkpoint
*/
func (a *Client) GetWebsiteCheckpointDataByID(params *GetWebsiteCheckpointDataByIDParams) (*GetWebsiteCheckpointDataByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteCheckpointDataByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteCheckpointDataById",
		Method:             "GET",
		PathPattern:        "/website/websites/{srvId}/checkpoints/{checkId}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteCheckpointDataByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteCheckpointDataByIDOK), nil

}

/*
GetWebsiteCheckpointDataByIDJSON gets data for a website checkpoint raw response
*/
func (a *Client) GetWebsiteCheckpointDataByIDJSON(params *GetWebsiteCheckpointDataByIDJSONParams) (*GetWebsiteCheckpointDataByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteCheckpointDataByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteCheckpointDataByIdJson",
		Method:             "GET",
		PathPattern:        "/website/websites/{srvId}/checkpoints/{checkId}/data?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteCheckpointDataByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteCheckpointDataByIDJSONOK), nil

}

/*
GetWebsiteDataByGraphName gets website data by graph name
*/
func (a *Client) GetWebsiteDataByGraphName(params *GetWebsiteDataByGraphNameParams) (*GetWebsiteDataByGraphNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteDataByGraphNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteDataByGraphName",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/graphs/{graphName}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteDataByGraphNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteDataByGraphNameOK), nil

}

/*
GetWebsiteDataByGraphNameJSON gets website data by graph name raw response
*/
func (a *Client) GetWebsiteDataByGraphNameJSON(params *GetWebsiteDataByGraphNameJSONParams) (*GetWebsiteDataByGraphNameJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteDataByGraphNameJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteDataByGraphNameJson",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/graphs/{graphName}/data?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteDataByGraphNameJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteDataByGraphNameJSONOK), nil

}

/*
GetWebsiteGraphData gets website graph data
*/
func (a *Client) GetWebsiteGraphData(params *GetWebsiteGraphDataParams) (*GetWebsiteGraphDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteGraphDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteGraphData",
		Method:             "GET",
		PathPattern:        "/website/websites/{websiteId}/checkpoints/{checkpointId}/graphs/{graphName}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteGraphDataReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteGraphDataOK), nil

}

/*
GetWebsiteGraphDataJSON gets website graph data raw response
*/
func (a *Client) GetWebsiteGraphDataJSON(params *GetWebsiteGraphDataJSONParams) (*GetWebsiteGraphDataJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteGraphDataJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteGraphDataJson",
		Method:             "GET",
		PathPattern:        "/website/websites/{websiteId}/checkpoints/{checkpointId}/graphs/{graphName}/data?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteGraphDataJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteGraphDataJSONOK), nil

}

/*
GetWebsiteGroupByID gets website group
*/
func (a *Client) GetWebsiteGroupByID(params *GetWebsiteGroupByIDParams) (*GetWebsiteGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteGroupById",
		Method:             "GET",
		PathPattern:        "/website/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteGroupByIDOK), nil

}

/*
GetWebsiteGroupByIDJSON gets website group raw response
*/
func (a *Client) GetWebsiteGroupByIDJSON(params *GetWebsiteGroupByIDJSONParams) (*GetWebsiteGroupByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteGroupByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteGroupByIdJson",
		Method:             "GET",
		PathPattern:        "/website/groups/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteGroupByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteGroupByIDJSONOK), nil

}

/*
GetWebsiteGroupList gets website group list
*/
func (a *Client) GetWebsiteGroupList(params *GetWebsiteGroupListParams) (*GetWebsiteGroupListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteGroupListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteGroupList",
		Method:             "GET",
		PathPattern:        "/website/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteGroupListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteGroupListOK), nil

}

/*
GetWebsiteGroupListJSON gets website group list raw response
*/
func (a *Client) GetWebsiteGroupListJSON(params *GetWebsiteGroupListJSONParams) (*GetWebsiteGroupListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteGroupListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteGroupListJson",
		Method:             "GET",
		PathPattern:        "/website/groups?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteGroupListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteGroupListJSONOK), nil

}

/*
GetWebsiteList gets website list
*/
func (a *Client) GetWebsiteList(params *GetWebsiteListParams) (*GetWebsiteListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteList",
		Method:             "GET",
		PathPattern:        "/website/websites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteListOK), nil

}

/*
GetWebsiteListJSON gets website list raw response
*/
func (a *Client) GetWebsiteListJSON(params *GetWebsiteListJSONParams) (*GetWebsiteListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteListJson",
		Method:             "GET",
		PathPattern:        "/website/websites?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteListJSONOK), nil

}

/*
GetWebsitePropertyListByWebsiteID gets a list of properties for a website
*/
func (a *Client) GetWebsitePropertyListByWebsiteID(params *GetWebsitePropertyListByWebsiteIDParams) (*GetWebsitePropertyListByWebsiteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsitePropertyListByWebsiteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsitePropertyListByWebsiteId",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsitePropertyListByWebsiteIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsitePropertyListByWebsiteIDOK), nil

}

/*
GetWebsitePropertyListByWebsiteIDJSON gets a list of properties for a website raw response
*/
func (a *Client) GetWebsitePropertyListByWebsiteIDJSON(params *GetWebsitePropertyListByWebsiteIDJSONParams) (*GetWebsitePropertyListByWebsiteIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsitePropertyListByWebsiteIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsitePropertyListByWebsiteIdJson",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/properties?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsitePropertyListByWebsiteIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsitePropertyListByWebsiteIDJSONOK), nil

}

/*
GetWebsiteSDTListByWebsiteID gets a list of s d ts for a website
*/
func (a *Client) GetWebsiteSDTListByWebsiteID(params *GetWebsiteSDTListByWebsiteIDParams) (*GetWebsiteSDTListByWebsiteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteSDTListByWebsiteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteSDTListByWebsiteId",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/sdts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteSDTListByWebsiteIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteSDTListByWebsiteIDOK), nil

}

/*
GetWebsiteSDTListByWebsiteIDJSON gets a list of s d ts for a website raw response
*/
func (a *Client) GetWebsiteSDTListByWebsiteIDJSON(params *GetWebsiteSDTListByWebsiteIDJSONParams) (*GetWebsiteSDTListByWebsiteIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebsiteSDTListByWebsiteIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWebsiteSDTListByWebsiteIdJson",
		Method:             "GET",
		PathPattern:        "/website/websites/{id}/sdts?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWebsiteSDTListByWebsiteIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebsiteSDTListByWebsiteIDJSONOK), nil

}

/*
GetWidgetByID gets widget by id based upon widget type the response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes
*/
func (a *Client) GetWidgetByID(params *GetWidgetByIDParams) (*GetWidgetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWidgetById",
		Method:             "GET",
		PathPattern:        "/dashboard/widgets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetByIDOK), nil

}

/*
GetWidgetByIDJSON gets widget by id based upon widget type the response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes raw response
*/
func (a *Client) GetWidgetByIDJSON(params *GetWidgetByIDJSONParams) (*GetWidgetByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWidgetByIdJson",
		Method:             "GET",
		PathPattern:        "/dashboard/widgets/{id}?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetByIDJSONOK), nil

}

/*
GetWidgetDataByID gets widget data based upon widget type the response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes
*/
func (a *Client) GetWidgetDataByID(params *GetWidgetDataByIDParams) (*GetWidgetDataByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetDataByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWidgetDataById",
		Method:             "GET",
		PathPattern:        "/dashboard/widgets/{id}/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetDataByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetDataByIDOK), nil

}

/*
GetWidgetDataByIDJSON gets widget data based upon widget type the response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes raw response
*/
func (a *Client) GetWidgetDataByIDJSON(params *GetWidgetDataByIDJSONParams) (*GetWidgetDataByIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetDataByIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWidgetDataByIdJson",
		Method:             "GET",
		PathPattern:        "/dashboard/widgets/{id}/data?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetDataByIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetDataByIDJSONOK), nil

}

/*
GetWidgetList gets widget list based upon widget type the response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes
*/
func (a *Client) GetWidgetList(params *GetWidgetListParams) (*GetWidgetListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWidgetList",
		Method:             "GET",
		PathPattern:        "/dashboard/widgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetListReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetListOK), nil

}

/*
GetWidgetListByDashboardID gets widget list by dashboard Id
*/
func (a *Client) GetWidgetListByDashboardID(params *GetWidgetListByDashboardIDParams) (*GetWidgetListByDashboardIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetListByDashboardIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWidgetListByDashboardId",
		Method:             "GET",
		PathPattern:        "/dashboard/dashboards/{id}/widgets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetListByDashboardIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetListByDashboardIDOK), nil

}

/*
GetWidgetListByDashboardIDJSON gets widget list by dashboard Id raw response
*/
func (a *Client) GetWidgetListByDashboardIDJSON(params *GetWidgetListByDashboardIDJSONParams) (*GetWidgetListByDashboardIDJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetListByDashboardIDJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWidgetListByDashboardIdJson",
		Method:             "GET",
		PathPattern:        "/dashboard/dashboards/{id}/widgets?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetListByDashboardIDJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetListByDashboardIDJSONOK), nil

}

/*
GetWidgetListJSON gets widget list based upon widget type the response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes raw response
*/
func (a *Client) GetWidgetListJSON(params *GetWidgetListJSONParams) (*GetWidgetListJSONOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWidgetListJSONParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWidgetListJson",
		Method:             "GET",
		PathPattern:        "/dashboard/widgets?__json=",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWidgetListJSONReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWidgetListJSONOK), nil

}

/*
PatchAccessGroup updates access group
*/
func (a *Client) PatchAccessGroup(params *PatchAccessGroupParams) (*PatchAccessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAccessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAccessGroup",
		Method:             "PATCH",
		PathPattern:        "/setting/accessgroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAccessGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAccessGroupOK), nil

}

/*
PatchAdminByID updates user
*/
func (a *Client) PatchAdminByID(params *PatchAdminByIDParams) (*PatchAdminByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAdminByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAdminById",
		Method:             "PATCH",
		PathPattern:        "/setting/admins/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAdminByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAdminByIDOK), nil

}

/*
PatchAlertRuleByID updates alert rule
*/
func (a *Client) PatchAlertRuleByID(params *PatchAlertRuleByIDParams) (*PatchAlertRuleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAlertRuleByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAlertRuleById",
		Method:             "PATCH",
		PathPattern:        "/setting/alert/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAlertRuleByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAlertRuleByIDOK), nil

}

/*
PatchAppliesToFunction updates applies to function
*/
func (a *Client) PatchAppliesToFunction(params *PatchAppliesToFunctionParams) (*PatchAppliesToFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAppliesToFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchAppliesToFunction",
		Method:             "PATCH",
		PathPattern:        "/setting/functions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAppliesToFunctionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAppliesToFunctionOK), nil

}

/*
PatchCollectorByID updates collector
*/
func (a *Client) PatchCollectorByID(params *PatchCollectorByIDParams) (*PatchCollectorByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCollectorByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCollectorById",
		Method:             "PATCH",
		PathPattern:        "/setting/collector/collectors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCollectorByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchCollectorByIDOK), nil

}

/*
PatchCollectorGroupByID updates collector group
*/
func (a *Client) PatchCollectorGroupByID(params *PatchCollectorGroupByIDParams) (*PatchCollectorGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCollectorGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchCollectorGroupById",
		Method:             "PATCH",
		PathPattern:        "/setting/collector/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCollectorGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchCollectorGroupByIDOK), nil

}

/*
PatchDashboardByID updates dashboard

The template field works only for the POST API
*/
func (a *Client) PatchDashboardByID(params *PatchDashboardByIDParams) (*PatchDashboardByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDashboardByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDashboardById",
		Method:             "PATCH",
		PathPattern:        "/dashboard/dashboards/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDashboardByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDashboardByIDOK), nil

}

/*
PatchDashboardGroupByID updates dashboard group

The template field works only for the POST API
*/
func (a *Client) PatchDashboardGroupByID(params *PatchDashboardGroupByIDParams) (*PatchDashboardGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDashboardGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDashboardGroupById",
		Method:             "PATCH",
		PathPattern:        "/dashboard/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDashboardGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDashboardGroupByIDOK), nil

}

/*
PatchDatasourceByID updates datasource
*/
func (a *Client) PatchDatasourceByID(params *PatchDatasourceByIDParams) (*PatchDatasourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDatasourceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDatasourceById",
		Method:             "PATCH",
		PathPattern:        "/setting/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDatasourceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDatasourceByIDOK), nil

}

/*
PatchDefaultDashboard updates default dashboard
*/
func (a *Client) PatchDefaultDashboard(params *PatchDefaultDashboardParams) (*PatchDefaultDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDefaultDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDefaultDashboard",
		Method:             "PATCH",
		PathPattern:        "/setting/userdata/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDefaultDashboardReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDefaultDashboardOK), nil

}

/*
PatchDevice updates a device
*/
func (a *Client) PatchDevice(params *PatchDeviceParams) (*PatchDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDevice",
		Method:             "PATCH",
		PathPattern:        "/device/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeviceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDeviceOK), nil

}

/*
PatchDeviceDatasourceInstanceAlertSettingByID updates device instance alert setting
*/
func (a *Client) PatchDeviceDatasourceInstanceAlertSettingByID(params *PatchDeviceDatasourceInstanceAlertSettingByIDParams) (*PatchDeviceDatasourceInstanceAlertSettingByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeviceDatasourceInstanceAlertSettingByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDeviceDatasourceInstanceAlertSettingById",
		Method:             "PATCH",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/alertsettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeviceDatasourceInstanceAlertSettingByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDeviceDatasourceInstanceAlertSettingByIDOK), nil

}

/*
PatchDeviceDatasourceInstanceByID updates device instance
*/
func (a *Client) PatchDeviceDatasourceInstanceByID(params *PatchDeviceDatasourceInstanceByIDParams) (*PatchDeviceDatasourceInstanceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeviceDatasourceInstanceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDeviceDatasourceInstanceById",
		Method:             "PATCH",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeviceDatasourceInstanceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDeviceDatasourceInstanceByIDOK), nil

}

/*
PatchDeviceDatasourceInstanceGroupByID updates device datasource instance group
*/
func (a *Client) PatchDeviceDatasourceInstanceGroupByID(params *PatchDeviceDatasourceInstanceGroupByIDParams) (*PatchDeviceDatasourceInstanceGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeviceDatasourceInstanceGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDeviceDatasourceInstanceGroupById",
		Method:             "PATCH",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeviceDatasourceInstanceGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDeviceDatasourceInstanceGroupByIDOK), nil

}

/*
PatchDeviceGroupByID updates device group
*/
func (a *Client) PatchDeviceGroupByID(params *PatchDeviceGroupByIDParams) (*PatchDeviceGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeviceGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDeviceGroupById",
		Method:             "PATCH",
		PathPattern:        "/device/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeviceGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDeviceGroupByIDOK), nil

}

/*
PatchDeviceGroupDatasourceAlertSetting updates device group datasource alert setting
*/
func (a *Client) PatchDeviceGroupDatasourceAlertSetting(params *PatchDeviceGroupDatasourceAlertSettingParams) (*PatchDeviceGroupDatasourceAlertSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeviceGroupDatasourceAlertSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDeviceGroupDatasourceAlertSetting",
		Method:             "PATCH",
		PathPattern:        "/device/groups/{deviceGroupId}/datasources/{dsId}/alertsettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeviceGroupDatasourceAlertSettingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDeviceGroupDatasourceAlertSettingOK), nil

}

/*
PatchDeviceGroupDatasourceByID updates device group datasource
*/
func (a *Client) PatchDeviceGroupDatasourceByID(params *PatchDeviceGroupDatasourceByIDParams) (*PatchDeviceGroupDatasourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeviceGroupDatasourceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDeviceGroupDatasourceById",
		Method:             "PATCH",
		PathPattern:        "/device/groups/{deviceGroupId}/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeviceGroupDatasourceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDeviceGroupDatasourceByIDOK), nil

}

/*
PatchDeviceGroupPropertyByName updates device group property
*/
func (a *Client) PatchDeviceGroupPropertyByName(params *PatchDeviceGroupPropertyByNameParams) (*PatchDeviceGroupPropertyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeviceGroupPropertyByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDeviceGroupPropertyByName",
		Method:             "PATCH",
		PathPattern:        "/device/groups/{gid}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeviceGroupPropertyByNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDeviceGroupPropertyByNameOK), nil

}

/*
PatchDevicePropertyByName updates device property
*/
func (a *Client) PatchDevicePropertyByName(params *PatchDevicePropertyByNameParams) (*PatchDevicePropertyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDevicePropertyByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDevicePropertyByName",
		Method:             "PATCH",
		PathPattern:        "/device/devices/{deviceId}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDevicePropertyByNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDevicePropertyByNameOK), nil

}

/*
PatchEscalationChainByID updates escalation chain
*/
func (a *Client) PatchEscalationChainByID(params *PatchEscalationChainByIDParams) (*PatchEscalationChainByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchEscalationChainByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchEscalationChainById",
		Method:             "PATCH",
		PathPattern:        "/setting/alert/chains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchEscalationChainByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchEscalationChainByIDOK), nil

}

/*
PatchRecipientGroupByID updates recipient group
*/
func (a *Client) PatchRecipientGroupByID(params *PatchRecipientGroupByIDParams) (*PatchRecipientGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRecipientGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRecipientGroupById",
		Method:             "PATCH",
		PathPattern:        "/setting/recipientgroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchRecipientGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchRecipientGroupByIDOK), nil

}

/*
PatchReportByID updates report
*/
func (a *Client) PatchReportByID(params *PatchReportByIDParams) (*PatchReportByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchReportByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchReportById",
		Method:             "PATCH",
		PathPattern:        "/report/reports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchReportByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchReportByIDOK), nil

}

/*
PatchReportGroupByID updates report group
*/
func (a *Client) PatchReportGroupByID(params *PatchReportGroupByIDParams) (*PatchReportGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchReportGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchReportGroupById",
		Method:             "PATCH",
		PathPattern:        "/report/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchReportGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchReportGroupByIDOK), nil

}

/*
PatchRoleByID updates role
*/
func (a *Client) PatchRoleByID(params *PatchRoleByIDParams) (*PatchRoleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRoleByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchRoleById",
		Method:             "PATCH",
		PathPattern:        "/setting/roles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchRoleByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchRoleByIDOK), nil

}

/*
PatchSDTByID updates SDT response may contain extra fields depending upon the type of SDT being updated
*/
func (a *Client) PatchSDTByID(params *PatchSDTByIDParams) (*PatchSDTByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchSDTByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchSDTById",
		Method:             "PATCH",
		PathPattern:        "/sdt/sdts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchSDTByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchSDTByIDOK), nil

}

/*
PatchWebsiteByID updates website
*/
func (a *Client) PatchWebsiteByID(params *PatchWebsiteByIDParams) (*PatchWebsiteByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchWebsiteByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWebsiteById",
		Method:             "PATCH",
		PathPattern:        "/website/websites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWebsiteByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWebsiteByIDOK), nil

}

/*
PatchWebsiteGroupByID updates website group
*/
func (a *Client) PatchWebsiteGroupByID(params *PatchWebsiteGroupByIDParams) (*PatchWebsiteGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchWebsiteGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWebsiteGroupById",
		Method:             "PATCH",
		PathPattern:        "/website/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWebsiteGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWebsiteGroupByIDOK), nil

}

/*
PatchWidgetByID updates widget based upon widget type the request and response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes
*/
func (a *Client) PatchWidgetByID(params *PatchWidgetByIDParams) (*PatchWidgetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchWidgetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchWidgetById",
		Method:             "PATCH",
		PathPattern:        "/dashboard/widgets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchWidgetByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchWidgetByIDOK), nil

}

/*
ScheduleAutoDiscoveryByDeviceID schedules active discovery for a device
*/
func (a *Client) ScheduleAutoDiscoveryByDeviceID(params *ScheduleAutoDiscoveryByDeviceIDParams) (*ScheduleAutoDiscoveryByDeviceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleAutoDiscoveryByDeviceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "scheduleAutoDiscoveryByDeviceId",
		Method:             "POST",
		PathPattern:        "/device/devices/{id}/scheduleAutoDiscovery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduleAutoDiscoveryByDeviceIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ScheduleAutoDiscoveryByDeviceIDOK), nil

}

/*
TestAWSAccount tests a w s account
*/
func (a *Client) TestAWSAccount(params *TestAWSAccountParams) (*TestAWSAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestAWSAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testAWSAccount",
		Method:             "POST",
		PathPattern:        "/aws/functions/testAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TestAWSAccountReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestAWSAccountOK), nil

}

/*
TestAzureAccount tests azure account
*/
func (a *Client) TestAzureAccount(params *TestAzureAccountParams) (*TestAzureAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestAzureAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testAzureAccount",
		Method:             "POST",
		PathPattern:        "/azure/functions/testAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TestAzureAccountReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestAzureAccountOK), nil

}

/*
TestGCPAccount tests g c p account
*/
func (a *Client) TestGCPAccount(params *TestGCPAccountParams) (*TestGCPAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestGCPAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testGCPAccount",
		Method:             "POST",
		PathPattern:        "/gcp/functions/testAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TestGCPAccountReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestGCPAccountOK), nil

}

/*
TestSaaSAccount tests saa s account
*/
func (a *Client) TestSaaSAccount(params *TestSaaSAccountParams) (*TestSaaSAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestSaaSAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testSaaSAccount",
		Method:             "POST",
		PathPattern:        "/saas/functions/testAccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TestSaaSAccountReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestSaaSAccountOK), nil

}

/*
UpdateAccessGroup updates access group
*/
func (a *Client) UpdateAccessGroup(params *UpdateAccessGroupParams) (*UpdateAccessGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccessGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAccessGroup",
		Method:             "PUT",
		PathPattern:        "/setting/accessgroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAccessGroupReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAccessGroupOK), nil

}

/*
UpdateAdminByID updates user
*/
func (a *Client) UpdateAdminByID(params *UpdateAdminByIDParams) (*UpdateAdminByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAdminByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAdminById",
		Method:             "PUT",
		PathPattern:        "/setting/admins/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAdminByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAdminByIDOK), nil

}

/*
UpdateAlertRuleByID updates alert rule
*/
func (a *Client) UpdateAlertRuleByID(params *UpdateAlertRuleByIDParams) (*UpdateAlertRuleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAlertRuleByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAlertRuleById",
		Method:             "PUT",
		PathPattern:        "/setting/alert/rules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAlertRuleByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAlertRuleByIDOK), nil

}

/*
UpdateAppliesToFunction updates applies to function
*/
func (a *Client) UpdateAppliesToFunction(params *UpdateAppliesToFunctionParams) (*UpdateAppliesToFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAppliesToFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAppliesToFunction",
		Method:             "PUT",
		PathPattern:        "/setting/functions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAppliesToFunctionReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAppliesToFunctionOK), nil

}

/*
UpdateCollectorByID updates collector
*/
func (a *Client) UpdateCollectorByID(params *UpdateCollectorByIDParams) (*UpdateCollectorByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCollectorByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCollectorById",
		Method:             "PUT",
		PathPattern:        "/setting/collector/collectors/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCollectorByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCollectorByIDOK), nil

}

/*
UpdateCollectorGroupByID updates collector group
*/
func (a *Client) UpdateCollectorGroupByID(params *UpdateCollectorGroupByIDParams) (*UpdateCollectorGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCollectorGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCollectorGroupById",
		Method:             "PUT",
		PathPattern:        "/setting/collector/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCollectorGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCollectorGroupByIDOK), nil

}

/*
UpdateDashboardByID updates dashboard

The template field works only for the POST API
*/
func (a *Client) UpdateDashboardByID(params *UpdateDashboardByIDParams) (*UpdateDashboardByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDashboardByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDashboardById",
		Method:             "PUT",
		PathPattern:        "/dashboard/dashboards/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDashboardByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDashboardByIDOK), nil

}

/*
UpdateDashboardGroupByID updates dashboard group

The template field works only for the POST API
*/
func (a *Client) UpdateDashboardGroupByID(params *UpdateDashboardGroupByIDParams) (*UpdateDashboardGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDashboardGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDashboardGroupById",
		Method:             "PUT",
		PathPattern:        "/dashboard/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDashboardGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDashboardGroupByIDOK), nil

}

/*
UpdateDatasourceByID updates datasource
*/
func (a *Client) UpdateDatasourceByID(params *UpdateDatasourceByIDParams) (*UpdateDatasourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDatasourceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDatasourceById",
		Method:             "PUT",
		PathPattern:        "/setting/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDatasourceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDatasourceByIDOK), nil

}

/*
UpdateDefaultDashboard updates default dashboard
*/
func (a *Client) UpdateDefaultDashboard(params *UpdateDefaultDashboardParams) (*UpdateDefaultDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDefaultDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDefaultDashboard",
		Method:             "PUT",
		PathPattern:        "/setting/userdata/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDefaultDashboardReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDefaultDashboardOK), nil

}

/*
UpdateDevice updates a device
*/
func (a *Client) UpdateDevice(params *UpdateDeviceParams) (*UpdateDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDevice",
		Method:             "PUT",
		PathPattern:        "/device/devices/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDeviceOK), nil

}

/*
UpdateDeviceDatasourceInstanceAlertSettingByID updates device instance alert setting
*/
func (a *Client) UpdateDeviceDatasourceInstanceAlertSettingByID(params *UpdateDeviceDatasourceInstanceAlertSettingByIDParams) (*UpdateDeviceDatasourceInstanceAlertSettingByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceDatasourceInstanceAlertSettingByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceDatasourceInstanceAlertSettingById",
		Method:             "PUT",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/alertsettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceDatasourceInstanceAlertSettingByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDeviceDatasourceInstanceAlertSettingByIDOK), nil

}

/*
UpdateDeviceDatasourceInstanceByID updates device instance
*/
func (a *Client) UpdateDeviceDatasourceInstanceByID(params *UpdateDeviceDatasourceInstanceByIDParams) (*UpdateDeviceDatasourceInstanceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceDatasourceInstanceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceDatasourceInstanceById",
		Method:             "PUT",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceDatasourceInstanceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDeviceDatasourceInstanceByIDOK), nil

}

/*
UpdateDeviceDatasourceInstanceGroupByID updates device datasource instance group
*/
func (a *Client) UpdateDeviceDatasourceInstanceGroupByID(params *UpdateDeviceDatasourceInstanceGroupByIDParams) (*UpdateDeviceDatasourceInstanceGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceDatasourceInstanceGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceDatasourceInstanceGroupById",
		Method:             "PUT",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceDatasourceInstanceGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDeviceDatasourceInstanceGroupByIDOK), nil

}

/*
UpdateDeviceGroupByID updates device group
*/
func (a *Client) UpdateDeviceGroupByID(params *UpdateDeviceGroupByIDParams) (*UpdateDeviceGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceGroupById",
		Method:             "PUT",
		PathPattern:        "/device/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDeviceGroupByIDOK), nil

}

/*
UpdateDeviceGroupDatasourceAlertSetting updates device group datasource alert setting
*/
func (a *Client) UpdateDeviceGroupDatasourceAlertSetting(params *UpdateDeviceGroupDatasourceAlertSettingParams) (*UpdateDeviceGroupDatasourceAlertSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceGroupDatasourceAlertSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceGroupDatasourceAlertSetting",
		Method:             "PUT",
		PathPattern:        "/device/groups/{deviceGroupId}/datasources/{dsId}/alertsettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceGroupDatasourceAlertSettingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDeviceGroupDatasourceAlertSettingOK), nil

}

/*
UpdateDeviceGroupDatasourceByID updates device group datasource
*/
func (a *Client) UpdateDeviceGroupDatasourceByID(params *UpdateDeviceGroupDatasourceByIDParams) (*UpdateDeviceGroupDatasourceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceGroupDatasourceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceGroupDatasourceById",
		Method:             "PUT",
		PathPattern:        "/device/groups/{deviceGroupId}/datasources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceGroupDatasourceByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDeviceGroupDatasourceByIDOK), nil

}

/*
UpdateDeviceGroupPropertyByName updates device group property
*/
func (a *Client) UpdateDeviceGroupPropertyByName(params *UpdateDeviceGroupPropertyByNameParams) (*UpdateDeviceGroupPropertyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceGroupPropertyByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceGroupPropertyByName",
		Method:             "PUT",
		PathPattern:        "/device/groups/{gid}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceGroupPropertyByNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDeviceGroupPropertyByNameOK), nil

}

/*
UpdateDevicePropertyByName updates device property
*/
func (a *Client) UpdateDevicePropertyByName(params *UpdateDevicePropertyByNameParams) (*UpdateDevicePropertyByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDevicePropertyByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDevicePropertyByName",
		Method:             "PUT",
		PathPattern:        "/device/devices/{deviceId}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDevicePropertyByNameReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDevicePropertyByNameOK), nil

}

/*
UpdateEscalationChainByID updates escalation chain
*/
func (a *Client) UpdateEscalationChainByID(params *UpdateEscalationChainByIDParams) (*UpdateEscalationChainByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEscalationChainByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEscalationChainById",
		Method:             "PUT",
		PathPattern:        "/setting/alert/chains/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEscalationChainByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateEscalationChainByIDOK), nil

}

/*
UpdateInstanceGroupAlertThreshold updates instance group alert threshold setting the threshold at default group is not allowed
*/
func (a *Client) UpdateInstanceGroupAlertThreshold(params *UpdateInstanceGroupAlertThresholdParams) (*UpdateInstanceGroupAlertThresholdOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInstanceGroupAlertThresholdParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInstanceGroupAlertThreshold",
		Method:             "PUT",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups/{dsigId}/datapoints/{dpId}/alertconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInstanceGroupAlertThresholdReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateInstanceGroupAlertThresholdOK), nil

}

/*
UpdateRecipientGroupByID updates recipient group
*/
func (a *Client) UpdateRecipientGroupByID(params *UpdateRecipientGroupByIDParams) (*UpdateRecipientGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRecipientGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRecipientGroupById",
		Method:             "PUT",
		PathPattern:        "/setting/recipientgroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRecipientGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRecipientGroupByIDOK), nil

}

/*
UpdateReportByID updates report
*/
func (a *Client) UpdateReportByID(params *UpdateReportByIDParams) (*UpdateReportByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReportByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateReportById",
		Method:             "PUT",
		PathPattern:        "/report/reports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateReportByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateReportByIDOK), nil

}

/*
UpdateReportGroupByID updates report group
*/
func (a *Client) UpdateReportGroupByID(params *UpdateReportGroupByIDParams) (*UpdateReportGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateReportGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateReportGroupById",
		Method:             "PUT",
		PathPattern:        "/report/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateReportGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateReportGroupByIDOK), nil

}

/*
UpdateRoleByID updates role
*/
func (a *Client) UpdateRoleByID(params *UpdateRoleByIDParams) (*UpdateRoleByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRoleByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateRoleById",
		Method:             "PUT",
		PathPattern:        "/setting/roles/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRoleByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateRoleByIDOK), nil

}

/*
UpdateSDTByID updates SDT response may contain extra fields depending upon the type of SDT being updated
*/
func (a *Client) UpdateSDTByID(params *UpdateSDTByIDParams) (*UpdateSDTByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSDTByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSDTById",
		Method:             "PUT",
		PathPattern:        "/sdt/sdts/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSDTByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSDTByIDOK), nil

}

/*
UpdateWebsiteByID updates website
*/
func (a *Client) UpdateWebsiteByID(params *UpdateWebsiteByIDParams) (*UpdateWebsiteByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWebsiteByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWebsiteById",
		Method:             "PUT",
		PathPattern:        "/website/websites/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWebsiteByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateWebsiteByIDOK), nil

}

/*
UpdateWebsiteGroupByID updates website group
*/
func (a *Client) UpdateWebsiteGroupByID(params *UpdateWebsiteGroupByIDParams) (*UpdateWebsiteGroupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWebsiteGroupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWebsiteGroupById",
		Method:             "PUT",
		PathPattern:        "/website/groups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWebsiteGroupByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateWebsiteGroupByIDOK), nil

}

/*
UpdateWidgetByID updates widget based upon widget type the request and response may contain additional attributes please refer models corresponding to specific widget type at the bottom of this page to check the attributes
*/
func (a *Client) UpdateWidgetByID(params *UpdateWidgetByIDParams) (*UpdateWidgetByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWidgetByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWidgetById",
		Method:             "PUT",
		PathPattern:        "/dashboard/widgets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWidgetByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateWidgetByIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
