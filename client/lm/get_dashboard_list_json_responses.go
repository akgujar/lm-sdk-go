// Code generated by go-swagger; DO NOT EDIT.

package lm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/logicmonitor/lm-sdk-go/v3/models"
)

// GetDashboardListJSONReader is a Reader for the GetDashboardListJSON structure.
type GetDashboardListJSONReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDashboardListJSONReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDashboardListJSONOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 429:
		result := NewGetDashboardListJSONTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetDashboardListJSONDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDashboardListJSONOK creates a GetDashboardListJSONOK with default headers values
func NewGetDashboardListJSONOK() *GetDashboardListJSONOK {
	return &GetDashboardListJSONOK{}
}

/*
GetDashboardListJSONOK describes a response with status code 200, with default header values.

successful operation
*/
type GetDashboardListJSONOK struct {
	Payload interface{}
}

// IsSuccess returns true when this get dashboard list Json o k response has a 2xx status code
func (o *GetDashboardListJSONOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get dashboard list Json o k response has a 3xx status code
func (o *GetDashboardListJSONOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dashboard list Json o k response has a 4xx status code
func (o *GetDashboardListJSONOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get dashboard list Json o k response has a 5xx status code
func (o *GetDashboardListJSONOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get dashboard list Json o k response a status code equal to that given
func (o *GetDashboardListJSONOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get dashboard list Json o k response
func (o *GetDashboardListJSONOK) Code() int {
	return 200
}

func (o *GetDashboardListJSONOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /dashboard/dashboards?__json=][%d] getDashboardListJsonOK %s", 200, payload)
}

func (o *GetDashboardListJSONOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /dashboard/dashboards?__json=][%d] getDashboardListJsonOK %s", 200, payload)
}

func (o *GetDashboardListJSONOK) GetPayload() interface{} {
	return o.Payload
}

func (o *GetDashboardListJSONOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDashboardListJSONTooManyRequests creates a GetDashboardListJSONTooManyRequests with default headers values
func NewGetDashboardListJSONTooManyRequests() *GetDashboardListJSONTooManyRequests {
	return &GetDashboardListJSONTooManyRequests{}
}

/*
GetDashboardListJSONTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type GetDashboardListJSONTooManyRequests struct {

	/* Request limit per X-Rate-Limit-Window
	 */
	XRateLimitLimit int64

	/* The number of requests left for the time window
	 */
	XRateLimitRemaining int64

	/* The rolling time window length with the unit of second
	 */
	XRateLimitWindow int64
}

// IsSuccess returns true when this get dashboard list Json too many requests response has a 2xx status code
func (o *GetDashboardListJSONTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get dashboard list Json too many requests response has a 3xx status code
func (o *GetDashboardListJSONTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get dashboard list Json too many requests response has a 4xx status code
func (o *GetDashboardListJSONTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get dashboard list Json too many requests response has a 5xx status code
func (o *GetDashboardListJSONTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get dashboard list Json too many requests response a status code equal to that given
func (o *GetDashboardListJSONTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get dashboard list Json too many requests response
func (o *GetDashboardListJSONTooManyRequests) Code() int {
	return 429
}

func (o *GetDashboardListJSONTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /dashboard/dashboards?__json=][%d] getDashboardListJsonTooManyRequests", 429)
}

func (o *GetDashboardListJSONTooManyRequests) String() string {
	return fmt.Sprintf("[GET /dashboard/dashboards?__json=][%d] getDashboardListJsonTooManyRequests", 429)
}

func (o *GetDashboardListJSONTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-rate-limit-limit
	hdrXRateLimitLimit := response.GetHeader("x-rate-limit-limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("x-rate-limit-limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header x-rate-limit-remaining
	hdrXRateLimitRemaining := response.GetHeader("x-rate-limit-remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("x-rate-limit-remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header x-rate-limit-window
	hdrXRateLimitWindow := response.GetHeader("x-rate-limit-window")

	if hdrXRateLimitWindow != "" {
		valxRateLimitWindow, err := swag.ConvertInt64(hdrXRateLimitWindow)
		if err != nil {
			return errors.InvalidType("x-rate-limit-window", "header", "int64", hdrXRateLimitWindow)
		}
		o.XRateLimitWindow = valxRateLimitWindow
	}

	return nil
}

// NewGetDashboardListJSONDefault creates a GetDashboardListJSONDefault with default headers values
func NewGetDashboardListJSONDefault(code int) *GetDashboardListJSONDefault {
	return &GetDashboardListJSONDefault{
		_statusCode: code,
	}
}

/*
GetDashboardListJSONDefault describes a response with status code -1, with default header values.

Error
*/
type GetDashboardListJSONDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get dashboard list Json default response has a 2xx status code
func (o *GetDashboardListJSONDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get dashboard list Json default response has a 3xx status code
func (o *GetDashboardListJSONDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get dashboard list Json default response has a 4xx status code
func (o *GetDashboardListJSONDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get dashboard list Json default response has a 5xx status code
func (o *GetDashboardListJSONDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get dashboard list Json default response a status code equal to that given
func (o *GetDashboardListJSONDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get dashboard list Json default response
func (o *GetDashboardListJSONDefault) Code() int {
	return o._statusCode
}

func (o *GetDashboardListJSONDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /dashboard/dashboards?__json=][%d] getDashboardListJson default %s", o._statusCode, payload)
}

func (o *GetDashboardListJSONDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /dashboard/dashboards?__json=][%d] getDashboardListJson default %s", o._statusCode, payload)
}

func (o *GetDashboardListJSONDefault) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetDashboardListJSONDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
