// Code generated by go-swagger; DO NOT EDIT.

package lm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetWebsiteCheckpointDataByIDJSONParams creates a new GetWebsiteCheckpointDataByIDJSONParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetWebsiteCheckpointDataByIDJSONParams() *GetWebsiteCheckpointDataByIDJSONParams {
	return &GetWebsiteCheckpointDataByIDJSONParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetWebsiteCheckpointDataByIDJSONParamsWithTimeout creates a new GetWebsiteCheckpointDataByIDJSONParams object
// with the ability to set a timeout on a request.
func NewGetWebsiteCheckpointDataByIDJSONParamsWithTimeout(timeout time.Duration) *GetWebsiteCheckpointDataByIDJSONParams {
	return &GetWebsiteCheckpointDataByIDJSONParams{
		timeout: timeout,
	}
}

// NewGetWebsiteCheckpointDataByIDJSONParamsWithContext creates a new GetWebsiteCheckpointDataByIDJSONParams object
// with the ability to set a context for a request.
func NewGetWebsiteCheckpointDataByIDJSONParamsWithContext(ctx context.Context) *GetWebsiteCheckpointDataByIDJSONParams {
	return &GetWebsiteCheckpointDataByIDJSONParams{
		Context: ctx,
	}
}

// NewGetWebsiteCheckpointDataByIDJSONParamsWithHTTPClient creates a new GetWebsiteCheckpointDataByIDJSONParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetWebsiteCheckpointDataByIDJSONParamsWithHTTPClient(client *http.Client) *GetWebsiteCheckpointDataByIDJSONParams {
	return &GetWebsiteCheckpointDataByIDJSONParams{
		HTTPClient: client,
	}
}

/*
GetWebsiteCheckpointDataByIDJSONParams contains all the parameters to send to the API endpoint

	for the get website checkpoint data by Id Json operation.

	Typically these are written to a http.Request.
*/
type GetWebsiteCheckpointDataByIDJSONParams struct {

	// UserAgent.
	//
	// Default: "Logicmonitor/GO-SDK"
	UserAgent *string

	/* Aggregate.

	   the aggregate option

	   Default: "none"
	*/
	Aggregate *string

	// CheckID.
	//
	// Format: int32
	CheckID int32

	// Datapoints.
	Datapoints *string

	// End.
	//
	// Format: int64
	End *int64

	// Format.
	//
	// Default: "json"
	Format *string

	// Period.
	//
	// Format: double
	// Default: 1
	Period *float64

	// SrvID.
	//
	// Format: int32
	SrvID int32

	// Start.
	//
	// Format: int64
	Start *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get website checkpoint data by Id Json params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWebsiteCheckpointDataByIDJSONParams) WithDefaults() *GetWebsiteCheckpointDataByIDJSONParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get website checkpoint data by Id Json params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetWebsiteCheckpointDataByIDJSONParams) SetDefaults() {
	var (
		userAgentDefault = string("Logicmonitor/GO-SDK")

		aggregateDefault = string("none")

		endDefault = int64(0)

		formatDefault = string("json")

		periodDefault = float64(1)

		startDefault = int64(0)
	)

	val := GetWebsiteCheckpointDataByIDJSONParams{
		UserAgent: &userAgentDefault,
		Aggregate: &aggregateDefault,
		End:       &endDefault,
		Format:    &formatDefault,
		Period:    &periodDefault,
		Start:     &startDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) WithTimeout(timeout time.Duration) *GetWebsiteCheckpointDataByIDJSONParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) WithContext(ctx context.Context) *GetWebsiteCheckpointDataByIDJSONParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) WithHTTPClient(client *http.Client) *GetWebsiteCheckpointDataByIDJSONParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserAgent adds the userAgent to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) WithUserAgent(userAgent *string) *GetWebsiteCheckpointDataByIDJSONParams {
	o.SetUserAgent(userAgent)
	return o
}

// SetUserAgent adds the userAgent to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) SetUserAgent(userAgent *string) {
	o.UserAgent = userAgent
}

// WithAggregate adds the aggregate to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) WithAggregate(aggregate *string) *GetWebsiteCheckpointDataByIDJSONParams {
	o.SetAggregate(aggregate)
	return o
}

// SetAggregate adds the aggregate to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) SetAggregate(aggregate *string) {
	o.Aggregate = aggregate
}

// WithCheckID adds the checkID to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) WithCheckID(checkID int32) *GetWebsiteCheckpointDataByIDJSONParams {
	o.SetCheckID(checkID)
	return o
}

// SetCheckID adds the checkId to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) SetCheckID(checkID int32) {
	o.CheckID = checkID
}

// WithDatapoints adds the datapoints to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) WithDatapoints(datapoints *string) *GetWebsiteCheckpointDataByIDJSONParams {
	o.SetDatapoints(datapoints)
	return o
}

// SetDatapoints adds the datapoints to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) SetDatapoints(datapoints *string) {
	o.Datapoints = datapoints
}

// WithEnd adds the end to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) WithEnd(end *int64) *GetWebsiteCheckpointDataByIDJSONParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) SetEnd(end *int64) {
	o.End = end
}

// WithFormat adds the format to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) WithFormat(format *string) *GetWebsiteCheckpointDataByIDJSONParams {
	o.SetFormat(format)
	return o
}

// SetFormat adds the format to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) SetFormat(format *string) {
	o.Format = format
}

// WithPeriod adds the period to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) WithPeriod(period *float64) *GetWebsiteCheckpointDataByIDJSONParams {
	o.SetPeriod(period)
	return o
}

// SetPeriod adds the period to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) SetPeriod(period *float64) {
	o.Period = period
}

// WithSrvID adds the srvID to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) WithSrvID(srvID int32) *GetWebsiteCheckpointDataByIDJSONParams {
	o.SetSrvID(srvID)
	return o
}

// SetSrvID adds the srvId to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) SetSrvID(srvID int32) {
	o.SrvID = srvID
}

// WithStart adds the start to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) WithStart(start *int64) *GetWebsiteCheckpointDataByIDJSONParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get website checkpoint data by Id Json params
func (o *GetWebsiteCheckpointDataByIDJSONParams) SetStart(start *int64) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *GetWebsiteCheckpointDataByIDJSONParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.UserAgent != nil {

		// header param User-Agent
		if err := r.SetHeaderParam("User-Agent", *o.UserAgent); err != nil {
			return err
		}
	}

	if o.Aggregate != nil {

		// query param aggregate
		var qrAggregate string

		if o.Aggregate != nil {
			qrAggregate = *o.Aggregate
		}
		qAggregate := qrAggregate
		if qAggregate != "" {

			if err := r.SetQueryParam("aggregate", qAggregate); err != nil {
				return err
			}
		}
	}

	// path param checkId
	if err := r.SetPathParam("checkId", swag.FormatInt32(o.CheckID)); err != nil {
		return err
	}

	if o.Datapoints != nil {

		// query param datapoints
		var qrDatapoints string

		if o.Datapoints != nil {
			qrDatapoints = *o.Datapoints
		}
		qDatapoints := qrDatapoints
		if qDatapoints != "" {

			if err := r.SetQueryParam("datapoints", qDatapoints); err != nil {
				return err
			}
		}
	}

	if o.End != nil {

		// query param end
		var qrEnd int64

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatInt64(qrEnd)
		if qEnd != "" {

			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}
	}

	if o.Format != nil {

		// query param format
		var qrFormat string

		if o.Format != nil {
			qrFormat = *o.Format
		}
		qFormat := qrFormat
		if qFormat != "" {

			if err := r.SetQueryParam("format", qFormat); err != nil {
				return err
			}
		}
	}

	if o.Period != nil {

		// query param period
		var qrPeriod float64

		if o.Period != nil {
			qrPeriod = *o.Period
		}
		qPeriod := swag.FormatFloat64(qrPeriod)
		if qPeriod != "" {

			if err := r.SetQueryParam("period", qPeriod); err != nil {
				return err
			}
		}
	}

	// path param srvId
	if err := r.SetPathParam("srvId", swag.FormatInt32(o.SrvID)); err != nil {
		return err
	}

	if o.Start != nil {

		// query param start
		var qrStart int64

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt64(qrStart)
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
