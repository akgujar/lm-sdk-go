// Code generated by go-swagger; DO NOT EDIT.

package thresholds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"reflect"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new thresholds API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry, authInfo runtime.ClientAuthInfoWriter) *Client {
	return &Client{
		transport: transport,
		formats:   formats,
		authInfo:  authInfo,
		userAgent: nil,
	}
}

/*
Client for thresholds API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
	authInfo  runtime.ClientAuthInfoWriter
	userAgent *string
}

/*
GetDeviceDatasourceInstanceAlertSettingListOfDSI gets a list of alert settings for a device datasource instance
*/
func (a *Client) GetDeviceDatasourceInstanceAlertSettingListOfDSI(params *GetDeviceDatasourceInstanceAlertSettingListOfDSIParams) (*GetDeviceDatasourceInstanceAlertSettingListOfDSIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDatasourceInstanceAlertSettingListOfDSIParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDatasourceInstanceAlertSettingListOfDSI",
		Method:             "GET",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/alertsettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceDatasourceInstanceAlertSettingListOfDSIReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDatasourceInstanceAlertSettingListOfDSIOK), nil

}

/*
GetDeviceGroupDatasourceAlertSetting gets device group datasource alert setting
*/
func (a *Client) GetDeviceGroupDatasourceAlertSetting(params *GetDeviceGroupDatasourceAlertSettingParams) (*GetDeviceGroupDatasourceAlertSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceGroupDatasourceAlertSettingParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceGroupDatasourceAlertSetting",
		Method:             "GET",
		PathPattern:        "/device/groups/{deviceGroupId}/datasources/{dsId}/alertsettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceGroupDatasourceAlertSettingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceGroupDatasourceAlertSettingOK), nil

}

/*
PatchDeviceDatasourceInstanceAlertSettingByID updates device instance alert setting
*/
func (a *Client) PatchDeviceDatasourceInstanceAlertSettingByID(params *PatchDeviceDatasourceInstanceAlertSettingByIDParams) (*PatchDeviceDatasourceInstanceAlertSettingByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeviceDatasourceInstanceAlertSettingByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDeviceDatasourceInstanceAlertSettingById",
		Method:             "PATCH",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/alertsettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeviceDatasourceInstanceAlertSettingByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDeviceDatasourceInstanceAlertSettingByIDOK), nil

}

/*
PatchDeviceGroupDatasourceAlertSetting updates device group datasource alert setting
*/
func (a *Client) PatchDeviceGroupDatasourceAlertSetting(params *PatchDeviceGroupDatasourceAlertSettingParams) (*PatchDeviceGroupDatasourceAlertSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDeviceGroupDatasourceAlertSettingParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchDeviceGroupDatasourceAlertSetting",
		Method:             "PATCH",
		PathPattern:        "/device/groups/{deviceGroupId}/datasources/{dsId}/alertsettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDeviceGroupDatasourceAlertSettingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchDeviceGroupDatasourceAlertSettingOK), nil

}

/*
UpdateDeviceDatasourceInstanceAlertSettingByID updates device instance alert setting
*/
func (a *Client) UpdateDeviceDatasourceInstanceAlertSettingByID(params *UpdateDeviceDatasourceInstanceAlertSettingByIDParams) (*UpdateDeviceDatasourceInstanceAlertSettingByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceDatasourceInstanceAlertSettingByIDParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceDatasourceInstanceAlertSettingById",
		Method:             "PUT",
		PathPattern:        "/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/alertsettings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceDatasourceInstanceAlertSettingByIDReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDeviceDatasourceInstanceAlertSettingByIDOK), nil

}

/*
UpdateDeviceGroupDatasourceAlertSetting updates device group datasource alert setting
*/
func (a *Client) UpdateDeviceGroupDatasourceAlertSetting(params *UpdateDeviceGroupDatasourceAlertSettingParams) (*UpdateDeviceGroupDatasourceAlertSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceGroupDatasourceAlertSettingParams()
	}
	reflect.ValueOf(params).MethodByName("SetUserAgent").Call([]reflect.Value{reflect.ValueOf(a.userAgent)})

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceGroupDatasourceAlertSetting",
		Method:             "PUT",
		PathPattern:        "/device/groups/{deviceGroupId}/datasources/{dsId}/alertsettings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDeviceGroupDatasourceAlertSettingReader{formats: a.formats},
		AuthInfo:           a.authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateDeviceGroupDatasourceAlertSettingOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// SetUserAgent changes the userAgent on the client
func (a *Client) SetUserAgent(userAgent *string) {
	a.userAgent = userAgent
}
