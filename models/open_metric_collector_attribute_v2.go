// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OpenMetricCollectorAttributeV2 open metric collector attribute v2
//
// swagger:model OpenMetricCollectorAttributeV2
type OpenMetricCollectorAttributeV2 struct {

	// connect timeout
	ConnectTimeout int32 `json:"connectTimeout,omitempty"`

	// follow redirect
	FollowRedirect bool `json:"followRedirect,omitempty"`

	// headers
	Headers string `json:"headers,omitempty"`

	// read timeout
	ReadTimeout int32 `json:"readTimeout,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Name gets the name of this subtype
func (m *OpenMetricCollectorAttributeV2) Name() string {
	return "OpenMetricCollectorAttributeV2"
}

// SetName sets the name of this subtype
func (m *OpenMetricCollectorAttributeV2) SetName(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *OpenMetricCollectorAttributeV2) UnmarshalJSON(raw []byte) error {
	var data struct {

		// connect timeout
		ConnectTimeout int32 `json:"connectTimeout,omitempty"`

		// follow redirect
		FollowRedirect bool `json:"followRedirect,omitempty"`

		// headers
		Headers string `json:"headers,omitempty"`

		// read timeout
		ReadTimeout int32 `json:"readTimeout,omitempty"`

		// url
		URL string `json:"url,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Name string `json:"name"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result OpenMetricCollectorAttributeV2

	if base.Name != result.Name() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid name value: %q", base.Name)
	}

	result.ConnectTimeout = data.ConnectTimeout
	result.FollowRedirect = data.FollowRedirect
	result.Headers = data.Headers
	result.ReadTimeout = data.ReadTimeout
	result.URL = data.URL

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m OpenMetricCollectorAttributeV2) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// connect timeout
		ConnectTimeout int32 `json:"connectTimeout,omitempty"`

		// follow redirect
		FollowRedirect bool `json:"followRedirect,omitempty"`

		// headers
		Headers string `json:"headers,omitempty"`

		// read timeout
		ReadTimeout int32 `json:"readTimeout,omitempty"`

		// url
		URL string `json:"url,omitempty"`
	}{

		ConnectTimeout: m.ConnectTimeout,

		FollowRedirect: m.FollowRedirect,

		Headers: m.Headers,

		ReadTimeout: m.ReadTimeout,

		URL: m.URL,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Name string `json:"name"`
	}{

		Name: m.Name(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this open metric collector attribute v2
func (m *OpenMetricCollectorAttributeV2) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this open metric collector attribute v2 based on the context it is used
func (m *OpenMetricCollectorAttributeV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *OpenMetricCollectorAttributeV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenMetricCollectorAttributeV2) UnmarshalBinary(b []byte) error {
	var res OpenMetricCollectorAttributeV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
