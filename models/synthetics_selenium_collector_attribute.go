// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SyntheticsSeleniumCollectorAttribute synthetics selenium collector attribute
//
// swagger:model SyntheticsSeleniumCollectorAttribute
type SyntheticsSeleniumCollectorAttribute struct {

	// check type
	// Required: true
	CheckType *string `json:"checkType"`

	// configs
	// Required: true
	Configs *string `json:"configs"`

	// synthetic script
	// Required: true
	SyntheticScript *string `json:"syntheticScript"`
}

// Name gets the name of this subtype
func (m *SyntheticsSeleniumCollectorAttribute) Name() string {
	return "SyntheticsSeleniumCollectorAttribute"
}

// SetName sets the name of this subtype
func (m *SyntheticsSeleniumCollectorAttribute) SetName(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *SyntheticsSeleniumCollectorAttribute) UnmarshalJSON(raw []byte) error {
	var data struct {

		// check type
		// Required: true
		CheckType *string `json:"checkType"`

		// configs
		// Required: true
		Configs *string `json:"configs"`

		// synthetic script
		// Required: true
		SyntheticScript *string `json:"syntheticScript"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Name string `json:"name"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result SyntheticsSeleniumCollectorAttribute

	if base.Name != result.Name() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid name value: %q", base.Name)
	}

	result.CheckType = data.CheckType
	result.Configs = data.Configs
	result.SyntheticScript = data.SyntheticScript

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m SyntheticsSeleniumCollectorAttribute) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// check type
		// Required: true
		CheckType *string `json:"checkType"`

		// configs
		// Required: true
		Configs *string `json:"configs"`

		// synthetic script
		// Required: true
		SyntheticScript *string `json:"syntheticScript"`
	}{

		CheckType: m.CheckType,

		Configs: m.Configs,

		SyntheticScript: m.SyntheticScript,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Name string `json:"name"`
	}{

		Name: m.Name(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this synthetics selenium collector attribute
func (m *SyntheticsSeleniumCollectorAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheckType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyntheticScript(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SyntheticsSeleniumCollectorAttribute) validateCheckType(formats strfmt.Registry) error {

	if err := validate.Required("checkType", "body", m.CheckType); err != nil {
		return err
	}

	return nil
}

func (m *SyntheticsSeleniumCollectorAttribute) validateConfigs(formats strfmt.Registry) error {

	if err := validate.Required("configs", "body", m.Configs); err != nil {
		return err
	}

	return nil
}

func (m *SyntheticsSeleniumCollectorAttribute) validateSyntheticScript(formats strfmt.Registry) error {

	if err := validate.Required("syntheticScript", "body", m.SyntheticScript); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this synthetics selenium collector attribute based on the context it is used
func (m *SyntheticsSeleniumCollectorAttribute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SyntheticsSeleniumCollectorAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyntheticsSeleniumCollectorAttribute) UnmarshalBinary(b []byte) error {
	var res SyntheticsSeleniumCollectorAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
