// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetflowNbarApplication netflow nbar application
//
// swagger:model NetflowNbarApplication
type NetflowNbarApplication struct {

	// application tag
	// Read Only: true
	ApplicationTag int64 `json:"applicationTag,omitempty"`

	// name
	// Read Only: true
	Name string `json:"name,omitempty"`

	// percent usage
	// Read Only: true
	PercentUsage float64 `json:"percentUsage,omitempty"`

	// type
	// Read Only: true
	Type string `json:"type,omitempty"`

	// usage
	// Read Only: true
	Usage float64 `json:"usage,omitempty"`
}

// DataType gets the data type of this subtype
func (m *NetflowNbarApplication) DataType() string {
	return "NetflowNbarApplication"
}

// SetDataType sets the data type of this subtype
func (m *NetflowNbarApplication) SetDataType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *NetflowNbarApplication) UnmarshalJSON(raw []byte) error {
	var data struct {

		// application tag
		// Read Only: true
		ApplicationTag int64 `json:"applicationTag,omitempty"`

		// name
		// Read Only: true
		Name string `json:"name,omitempty"`

		// percent usage
		// Read Only: true
		PercentUsage float64 `json:"percentUsage,omitempty"`

		// type
		// Read Only: true
		Type string `json:"type,omitempty"`

		// usage
		// Read Only: true
		Usage float64 `json:"usage,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		DataType string `json:"dataType,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result NetflowNbarApplication

	if base.DataType != result.DataType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid dataType value: %q", base.DataType)
	}

	result.ApplicationTag = data.ApplicationTag
	result.Name = data.Name
	result.PercentUsage = data.PercentUsage
	result.Type = data.Type
	result.Usage = data.Usage

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m NetflowNbarApplication) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// application tag
		// Read Only: true
		ApplicationTag int64 `json:"applicationTag,omitempty"`

		// name
		// Read Only: true
		Name string `json:"name,omitempty"`

		// percent usage
		// Read Only: true
		PercentUsage float64 `json:"percentUsage,omitempty"`

		// type
		// Read Only: true
		Type string `json:"type,omitempty"`

		// usage
		// Read Only: true
		Usage float64 `json:"usage,omitempty"`
	}{

		ApplicationTag: m.ApplicationTag,

		Name: m.Name,

		PercentUsage: m.PercentUsage,

		Type: m.Type,

		Usage: m.Usage,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		DataType string `json:"dataType,omitempty"`
	}{

		DataType: m.DataType(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this netflow nbar application
func (m *NetflowNbarApplication) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this netflow nbar application based on the context it is used
func (m *NetflowNbarApplication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationTag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePercentUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetflowNbarApplication) contextValidateDataType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dataType", "body", string(m.DataType())); err != nil {
		return err
	}

	return nil
}

func (m *NetflowNbarApplication) contextValidateApplicationTag(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "applicationTag", "body", int64(m.ApplicationTag)); err != nil {
		return err
	}

	return nil
}

func (m *NetflowNbarApplication) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *NetflowNbarApplication) contextValidatePercentUsage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "percentUsage", "body", float64(m.PercentUsage)); err != nil {
		return err
	}

	return nil
}

func (m *NetflowNbarApplication) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

func (m *NetflowNbarApplication) contextValidateUsage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "usage", "body", float64(m.Usage)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetflowNbarApplication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetflowNbarApplication) UnmarshalBinary(b []byte) error {
	var res NetflowNbarApplication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
