// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateReason update reason
//
// swagger:model UpdateReason
type UpdateReason struct {

	// Client IP from which this update has been made
	// Read Only: true
	ClientIP string `json:"clientIp,omitempty"`

	// ID of update reason
	// Read Only: true
	ID int32 `json:"id,omitempty"`

	// update date epoch
	// Read Only: true
	TimeEpoch int64 `json:"timeEpoch,omitempty"`

	// update date in form 'YYYY-MM-DD HH:MM:SS'
	// Read Only: true
	TimeStr string `json:"timeStr,omitempty"`

	// update reason
	UpdateReason string `json:"updateReason,omitempty"`

	// user who made this update
	UserName string `json:"userName,omitempty"`
}

// Validate validates this update reason
func (m *UpdateReason) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this update reason based on the context it is used
func (m *UpdateReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClientIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeEpoch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeStr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateReason) contextValidateClientIP(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "clientIp", "body", string(m.ClientIP)); err != nil {
		return err
	}

	return nil
}

func (m *UpdateReason) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int32(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *UpdateReason) contextValidateTimeEpoch(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "timeEpoch", "body", int64(m.TimeEpoch)); err != nil {
		return err
	}

	return nil
}

func (m *UpdateReason) contextValidateTimeStr(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "timeStr", "body", string(m.TimeStr)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateReason) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateReason) UnmarshalBinary(b []byte) error {
	var res UpdateReason
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
