// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetflowBgpTable netflow bgp table
//
// swagger:model NetflowBgpTable
type NetflowBgpTable struct {

	// autonomous system number
	// Read Only: true
	AsNumber int64 `json:"asNumber,omitempty"`

	// the description of the asNumber
	// Read Only: true
	Description string `json:"description,omitempty"`

	// percentage of traffic through this asn
	// Read Only: true
	PercentUsage float64 `json:"percentUsage,omitempty"`

	// total bytes through this asn
	// Read Only: true
	Usage float64 `json:"usage,omitempty"`
}

// DataType gets the data type of this subtype
func (m *NetflowBgpTable) DataType() string {
	return "NetflowBgpTable"
}

// SetDataType sets the data type of this subtype
func (m *NetflowBgpTable) SetDataType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *NetflowBgpTable) UnmarshalJSON(raw []byte) error {
	var data struct {

		// autonomous system number
		// Read Only: true
		AsNumber int64 `json:"asNumber,omitempty"`

		// the description of the asNumber
		// Read Only: true
		Description string `json:"description,omitempty"`

		// percentage of traffic through this asn
		// Read Only: true
		PercentUsage float64 `json:"percentUsage,omitempty"`

		// total bytes through this asn
		// Read Only: true
		Usage float64 `json:"usage,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		DataType string `json:"dataType,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result NetflowBgpTable

	if base.DataType != result.DataType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid dataType value: %q", base.DataType)
	}

	result.AsNumber = data.AsNumber
	result.Description = data.Description
	result.PercentUsage = data.PercentUsage
	result.Usage = data.Usage

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m NetflowBgpTable) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// autonomous system number
		// Read Only: true
		AsNumber int64 `json:"asNumber,omitempty"`

		// the description of the asNumber
		// Read Only: true
		Description string `json:"description,omitempty"`

		// percentage of traffic through this asn
		// Read Only: true
		PercentUsage float64 `json:"percentUsage,omitempty"`

		// total bytes through this asn
		// Read Only: true
		Usage float64 `json:"usage,omitempty"`
	}{

		AsNumber: m.AsNumber,

		Description: m.Description,

		PercentUsage: m.PercentUsage,

		Usage: m.Usage,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		DataType string `json:"dataType,omitempty"`
	}{

		DataType: m.DataType(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this netflow bgp table
func (m *NetflowBgpTable) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this netflow bgp table based on the context it is used
func (m *NetflowBgpTable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAsNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePercentUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetflowBgpTable) contextValidateDataType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "dataType", "body", string(m.DataType())); err != nil {
		return err
	}

	return nil
}

func (m *NetflowBgpTable) contextValidateAsNumber(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "asNumber", "body", int64(m.AsNumber)); err != nil {
		return err
	}

	return nil
}

func (m *NetflowBgpTable) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *NetflowBgpTable) contextValidatePercentUsage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "percentUsage", "body", float64(m.PercentUsage)); err != nil {
		return err
	}

	return nil
}

func (m *NetflowBgpTable) contextValidateUsage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "usage", "body", float64(m.Usage)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetflowBgpTable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetflowBgpTable) UnmarshalBinary(b []byte) error {
	var res NetflowBgpTable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
