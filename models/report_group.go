// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportGroup report group
//
// swagger:model ReportGroup
type ReportGroup struct {

	// The report group description
	// Example: This is daily firewall reports
	Description string `json:"description,omitempty"`

	// The report group id
	// Read Only: true
	ID int32 `json:"id,omitempty"`

	// The matched reports count of this group
	// Example: 2
	// Read Only: true
	MatchedReportCount int32 `json:"matchedReportCount,omitempty"`

	// The report group name
	// Example: Firewall Reports
	// Required: true
	Name *string `json:"name"`

	// The reports count of this group
	// Example: 5
	// Read Only: true
	ReportsCount int32 `json:"reportsCount,omitempty"`

	// The user permission on the report group
	// Example: read
	// Read Only: true
	UserPermission string `json:"userPermission,omitempty"`
}

// Validate validates this report group
func (m *ReportGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this report group based on the context it is used
func (m *ReportGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMatchedReportCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReportsCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserPermission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportGroup) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", int32(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *ReportGroup) contextValidateMatchedReportCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "matchedReportCount", "body", int32(m.MatchedReportCount)); err != nil {
		return err
	}

	return nil
}

func (m *ReportGroup) contextValidateReportsCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "reportsCount", "body", int32(m.ReportsCount)); err != nil {
		return err
	}

	return nil
}

func (m *ReportGroup) contextValidateUserPermission(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "userPermission", "body", string(m.UserPermission)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportGroup) UnmarshalBinary(b []byte) error {
	var res ReportGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
