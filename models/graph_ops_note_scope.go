// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GraphOpsNoteScope graph ops note scope
//
// swagger:model GraphOpsNoteScope
type GraphOpsNoteScope struct {

	// The device group Id
	// Read Only: true
	DeviceGroupIds []int32 `json:"deviceGroupIds,omitempty"`

	// The device Id
	// Read Only: true
	DeviceID int32 `json:"deviceId,omitempty"`

	// The service group Id
	// Read Only: true
	ServiceGroupIds []int32 `json:"serviceGroupIds,omitempty"`

	// The service Id
	// Read Only: true
	ServiceID int32 `json:"serviceId,omitempty"`

	// The values can be device | service | website
	// Read Only: true
	Type string `json:"type,omitempty"`
}

// Validate validates this graph ops note scope
func (m *GraphOpsNoteScope) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this graph ops note scope based on the context it is used
func (m *GraphOpsNoteScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeviceGroupIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeviceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceGroupIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GraphOpsNoteScope) contextValidateDeviceGroupIds(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deviceGroupIds", "body", []int32(m.DeviceGroupIds)); err != nil {
		return err
	}

	return nil
}

func (m *GraphOpsNoteScope) contextValidateDeviceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deviceId", "body", int32(m.DeviceID)); err != nil {
		return err
	}

	return nil
}

func (m *GraphOpsNoteScope) contextValidateServiceGroupIds(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "serviceGroupIds", "body", []int32(m.ServiceGroupIds)); err != nil {
		return err
	}

	return nil
}

func (m *GraphOpsNoteScope) contextValidateServiceID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "serviceId", "body", int32(m.ServiceID)); err != nil {
		return err
	}

	return nil
}

func (m *GraphOpsNoteScope) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GraphOpsNoteScope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GraphOpsNoteScope) UnmarshalBinary(b []byte) error {
	var res GraphOpsNoteScope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
