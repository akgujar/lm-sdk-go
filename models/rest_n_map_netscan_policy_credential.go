// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RestNMapNetscanPolicyCredential rest n map netscan policy credential
//
// swagger:model RestNMapNetscanPolicyCredential
type RestNMapNetscanPolicyCredential struct {

	// Custom credentials that should be used for this scan
	// Example: [{\"snmp.community\":\"test\"}]
	Custom []map[string]string `json:"custom,omitempty"`

	// The ID of the device group that credentials should be inherited from, for this scan
	// Example: 1
	DeviceGroupID int32 `json:"deviceGroupId,omitempty"`

	// The name of the device group that credentials should be inherited from, for this scan
	// Example: Network Devices
	DeviceGroupName string `json:"deviceGroupName,omitempty"`

	// The ID of the device that credentials should be inherited from, for this scan
	// Example: 0
	DeviceID int32 `json:"deviceId,omitempty"`

	// The name of the device that credentials should be inherited from, for this scan
	// Example: LinuxDC1
	DeviceName string `json:"deviceName,omitempty"`

	// Multiple snmpv3 properties that should be used for this scan
	SnmpV3Credentials []map[string]string `json:"snmpV3Credentials,omitempty"`
}

// Validate validates this rest n map netscan policy credential
func (m *RestNMapNetscanPolicyCredential) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this rest n map netscan policy credential based on context it is used
func (m *RestNMapNetscanPolicyCredential) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RestNMapNetscanPolicyCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestNMapNetscanPolicyCredential) UnmarshalBinary(b []byte) error {
	var res RestNMapNetscanPolicyCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
