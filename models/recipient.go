// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Recipient recipient
//
// swagger:model Recipient
type Recipient struct {

	// the user name if method = admin, or the email address if method = arbitrary
	// Example: john.doe@logicmonitor.com
	Addr string `json:"addr,omitempty"`

	// contact details, email address or phone number
	Contact string `json:"contact,omitempty"`

	// EMAIL|SMEMAIL|VOICE|SMS, Recipient method for each type
	//             group: "method" not used
	//             arbitrary: the method should be email.
	//             admin: the method  Should be email, smsEmail, voice, sms, or defaultMethod;
	//
	// Example: EMAIL
	// Required: true
	Method *string `json:"method"`

	// GROUP|ARBITRARY|ADMIN, where Admin = a user, and Arbitrary = an arbitrary email
	// Example: Admin
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this recipient
func (m *Recipient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Recipient) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	return nil
}

func (m *Recipient) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this recipient based on context it is used
func (m *Recipient) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Recipient) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Recipient) UnmarshalBinary(b []byte) error {
	var res Recipient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
