// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfigCheck config check
//
// swagger:model ConfigCheck
type ConfigCheck struct {

	// Clear alert after ACKED or not
	AckClearAlert bool `json:"ackClearAlert,omitempty"`

	// Alert effective interval
	AlertEffectiveIval int32 `json:"alertEffectiveIval,omitempty"`

	// The triggered alert level if config check failure. 1-4 (1: no alert, 2: warn alert, 3: error alert, 4: critical alert)
	AlertLevel int32 `json:"alertLevel,omitempty"`

	// The count that the alert must exist for these many poll cycles before it will be triggered
	AlertTransitionInterval int32 `json:"alertTransitionInterval,omitempty"`

	// The ConfigSource id
	ConfigSourceID int32 `json:"configSourceId,omitempty"`

	// The ConfigCheck id
	Description string `json:"description,omitempty"`

	// The ConfigCheck id
	ID int32 `json:"id,omitempty"`

	// The ConfigCheck name
	Name string `json:"name,omitempty"`

	// portable id for origin tracking
	OriginID string `json:"originId,omitempty"`

	// The ConfigCheck script
	Script JSONObject `json:"script,omitempty"`

	// The ConfigCheck type. fetch|ignore|missing|value|groovy
	Type string `json:"type,omitempty"`
}

// Validate validates this config check
func (m *ConfigCheck) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this config check based on context it is used
func (m *ConfigCheck) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ConfigCheck) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigCheck) UnmarshalBinary(b []byte) error {
	var res ConfigCheck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
